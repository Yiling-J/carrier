// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/ingredient"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/predicate"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/recipeingredient"
)

// RecipeIngredientQuery is the builder for querying RecipeIngredient entities.
type RecipeIngredientQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.RecipeIngredient
	// eager-loading edges.
	withIngredient *IngredientQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RecipeIngredientQuery builder.
func (riq *RecipeIngredientQuery) Where(ps ...predicate.RecipeIngredient) *RecipeIngredientQuery {
	riq.predicates = append(riq.predicates, ps...)
	return riq
}

// Limit adds a limit step to the query.
func (riq *RecipeIngredientQuery) Limit(limit int) *RecipeIngredientQuery {
	riq.limit = &limit
	return riq
}

// Offset adds an offset step to the query.
func (riq *RecipeIngredientQuery) Offset(offset int) *RecipeIngredientQuery {
	riq.offset = &offset
	return riq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (riq *RecipeIngredientQuery) Unique(unique bool) *RecipeIngredientQuery {
	riq.unique = &unique
	return riq
}

// Order adds an order step to the query.
func (riq *RecipeIngredientQuery) Order(o ...OrderFunc) *RecipeIngredientQuery {
	riq.order = append(riq.order, o...)
	return riq
}

// QueryIngredient chains the current query on the "ingredient" edge.
func (riq *RecipeIngredientQuery) QueryIngredient() *IngredientQuery {
	query := &IngredientQuery{config: riq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := riq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := riq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(recipeingredient.Table, recipeingredient.FieldID, selector),
			sqlgraph.To(ingredient.Table, ingredient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recipeingredient.IngredientTable, recipeingredient.IngredientColumn),
		)
		fromU = sqlgraph.SetNeighbors(riq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RecipeIngredient entity from the query.
// Returns a *NotFoundError when no RecipeIngredient was found.
func (riq *RecipeIngredientQuery) First(ctx context.Context) (*RecipeIngredient, error) {
	nodes, err := riq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{recipeingredient.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (riq *RecipeIngredientQuery) FirstX(ctx context.Context) *RecipeIngredient {
	node, err := riq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RecipeIngredient ID from the query.
// Returns a *NotFoundError when no RecipeIngredient ID was found.
func (riq *RecipeIngredientQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = riq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{recipeingredient.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (riq *RecipeIngredientQuery) FirstIDX(ctx context.Context) int {
	id, err := riq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RecipeIngredient entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one RecipeIngredient entity is not found.
// Returns a *NotFoundError when no RecipeIngredient entities are found.
func (riq *RecipeIngredientQuery) Only(ctx context.Context) (*RecipeIngredient, error) {
	nodes, err := riq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{recipeingredient.Label}
	default:
		return nil, &NotSingularError{recipeingredient.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (riq *RecipeIngredientQuery) OnlyX(ctx context.Context) *RecipeIngredient {
	node, err := riq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RecipeIngredient ID in the query.
// Returns a *NotSingularError when exactly one RecipeIngredient ID is not found.
// Returns a *NotFoundError when no entities are found.
func (riq *RecipeIngredientQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = riq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = &NotSingularError{recipeingredient.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (riq *RecipeIngredientQuery) OnlyIDX(ctx context.Context) int {
	id, err := riq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RecipeIngredients.
func (riq *RecipeIngredientQuery) All(ctx context.Context) ([]*RecipeIngredient, error) {
	if err := riq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return riq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (riq *RecipeIngredientQuery) AllX(ctx context.Context) []*RecipeIngredient {
	nodes, err := riq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RecipeIngredient IDs.
func (riq *RecipeIngredientQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := riq.Select(recipeingredient.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (riq *RecipeIngredientQuery) IDsX(ctx context.Context) []int {
	ids, err := riq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (riq *RecipeIngredientQuery) Count(ctx context.Context) (int, error) {
	if err := riq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return riq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (riq *RecipeIngredientQuery) CountX(ctx context.Context) int {
	count, err := riq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (riq *RecipeIngredientQuery) Exist(ctx context.Context) (bool, error) {
	if err := riq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return riq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (riq *RecipeIngredientQuery) ExistX(ctx context.Context) bool {
	exist, err := riq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RecipeIngredientQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (riq *RecipeIngredientQuery) Clone() *RecipeIngredientQuery {
	if riq == nil {
		return nil
	}
	return &RecipeIngredientQuery{
		config:         riq.config,
		limit:          riq.limit,
		offset:         riq.offset,
		order:          append([]OrderFunc{}, riq.order...),
		predicates:     append([]predicate.RecipeIngredient{}, riq.predicates...),
		withIngredient: riq.withIngredient.Clone(),
		// clone intermediate query.
		sql:  riq.sql.Clone(),
		path: riq.path,
	}
}

// WithIngredient tells the query-builder to eager-load the nodes that are connected to
// the "ingredient" edge. The optional arguments are used to configure the query builder of the edge.
func (riq *RecipeIngredientQuery) WithIngredient(opts ...func(*IngredientQuery)) *RecipeIngredientQuery {
	query := &IngredientQuery{config: riq.config}
	for _, opt := range opts {
		opt(query)
	}
	riq.withIngredient = query
	return riq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Quantity float32 `json:"quantity,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RecipeIngredient.Query().
//		GroupBy(recipeingredient.FieldQuantity).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (riq *RecipeIngredientQuery) GroupBy(field string, fields ...string) *RecipeIngredientGroupBy {
	group := &RecipeIngredientGroupBy{config: riq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := riq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return riq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Quantity float32 `json:"quantity,omitempty"`
//	}
//
//	client.RecipeIngredient.Query().
//		Select(recipeingredient.FieldQuantity).
//		Scan(ctx, &v)
//
func (riq *RecipeIngredientQuery) Select(fields ...string) *RecipeIngredientSelect {
	riq.fields = append(riq.fields, fields...)
	return &RecipeIngredientSelect{RecipeIngredientQuery: riq}
}

func (riq *RecipeIngredientQuery) prepareQuery(ctx context.Context) error {
	for _, f := range riq.fields {
		if !recipeingredient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if riq.path != nil {
		prev, err := riq.path(ctx)
		if err != nil {
			return err
		}
		riq.sql = prev
	}
	return nil
}

func (riq *RecipeIngredientQuery) sqlAll(ctx context.Context) ([]*RecipeIngredient, error) {
	var (
		nodes       = []*RecipeIngredient{}
		withFKs     = riq.withFKs
		_spec       = riq.querySpec()
		loadedTypes = [1]bool{
			riq.withIngredient != nil,
		}
	)
	if riq.withIngredient != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, recipeingredient.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &RecipeIngredient{config: riq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, riq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := riq.withIngredient; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*RecipeIngredient)
		for i := range nodes {
			if nodes[i].ingredient_recipe_ingredients == nil {
				continue
			}
			fk := *nodes[i].ingredient_recipe_ingredients
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(ingredient.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "ingredient_recipe_ingredients" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Ingredient = n
			}
		}
	}

	return nodes, nil
}

func (riq *RecipeIngredientQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := riq.querySpec()
	return sqlgraph.CountNodes(ctx, riq.driver, _spec)
}

func (riq *RecipeIngredientQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := riq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (riq *RecipeIngredientQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recipeingredient.Table,
			Columns: recipeingredient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recipeingredient.FieldID,
			},
		},
		From:   riq.sql,
		Unique: true,
	}
	if unique := riq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := riq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipeingredient.FieldID)
		for i := range fields {
			if fields[i] != recipeingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := riq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := riq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := riq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := riq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (riq *RecipeIngredientQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(riq.driver.Dialect())
	t1 := builder.Table(recipeingredient.Table)
	columns := riq.fields
	if len(columns) == 0 {
		columns = recipeingredient.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if riq.sql != nil {
		selector = riq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range riq.predicates {
		p(selector)
	}
	for _, p := range riq.order {
		p(selector)
	}
	if offset := riq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := riq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RecipeIngredientGroupBy is the group-by builder for RecipeIngredient entities.
type RecipeIngredientGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rigb *RecipeIngredientGroupBy) Aggregate(fns ...AggregateFunc) *RecipeIngredientGroupBy {
	rigb.fns = append(rigb.fns, fns...)
	return rigb
}

// Scan applies the group-by query and scans the result into the given value.
func (rigb *RecipeIngredientGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := rigb.path(ctx)
	if err != nil {
		return err
	}
	rigb.sql = query
	return rigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := rigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(rigb.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := rigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) StringsX(ctx context.Context) []string {
	v, err := rigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = rigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) StringX(ctx context.Context) string {
	v, err := rigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(rigb.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := rigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) IntsX(ctx context.Context) []int {
	v, err := rigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = rigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) IntX(ctx context.Context) int {
	v, err := rigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(rigb.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := rigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := rigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = rigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) Float64X(ctx context.Context) float64 {
	v, err := rigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(rigb.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := rigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := rigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (rigb *RecipeIngredientGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = rigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (rigb *RecipeIngredientGroupBy) BoolX(ctx context.Context) bool {
	v, err := rigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rigb *RecipeIngredientGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range rigb.fields {
		if !recipeingredient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := rigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (rigb *RecipeIngredientGroupBy) sqlQuery() *sql.Selector {
	selector := rigb.sql.Select()
	aggregation := make([]string, 0, len(rigb.fns))
	for _, fn := range rigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(rigb.fields)+len(rigb.fns))
		for _, f := range rigb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(rigb.fields...)...)
}

// RecipeIngredientSelect is the builder for selecting fields of RecipeIngredient entities.
type RecipeIngredientSelect struct {
	*RecipeIngredientQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ris *RecipeIngredientSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ris.prepareQuery(ctx); err != nil {
		return err
	}
	ris.sql = ris.RecipeIngredientQuery.sqlQuery(ctx)
	return ris.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ris *RecipeIngredientSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ris.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ris.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ris.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ris *RecipeIngredientSelect) StringsX(ctx context.Context) []string {
	v, err := ris.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ris.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ris *RecipeIngredientSelect) StringX(ctx context.Context) string {
	v, err := ris.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ris.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ris.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ris *RecipeIngredientSelect) IntsX(ctx context.Context) []int {
	v, err := ris.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ris.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ris *RecipeIngredientSelect) IntX(ctx context.Context) int {
	v, err := ris.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ris.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ris.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ris *RecipeIngredientSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ris.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ris.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ris *RecipeIngredientSelect) Float64X(ctx context.Context) float64 {
	v, err := ris.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ris.fields) > 1 {
		return nil, errors.New("ent: RecipeIngredientSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ris.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ris *RecipeIngredientSelect) BoolsX(ctx context.Context) []bool {
	v, err := ris.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ris *RecipeIngredientSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ris.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{recipeingredient.Label}
	default:
		err = fmt.Errorf("ent: RecipeIngredientSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ris *RecipeIngredientSelect) BoolX(ctx context.Context) bool {
	v, err := ris.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ris *RecipeIngredientSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ris.sql.Query()
	if err := ris.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
