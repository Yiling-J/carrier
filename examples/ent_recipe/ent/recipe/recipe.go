// Code generated by entc, DO NOT EDIT.

package recipe

const (
	// Label holds the string label denoting the recipe type in the database.
	Label = "recipe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldServings holds the string denoting the servings field in the database.
	FieldServings = "servings"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeSteps holds the string denoting the steps edge name in mutations.
	EdgeSteps = "steps"
	// EdgeRecipeIngredients holds the string denoting the recipe_ingredients edge name in mutations.
	EdgeRecipeIngredients = "recipe_ingredients"
	// Table holds the table name of the recipe in the database.
	Table = "recipes"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "recipes"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_recipes"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "recipe_tags"
	// TagsInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	TagsInverseTable = "categories"
	// StepsTable is the table that holds the steps relation/edge.
	StepsTable = "steps"
	// StepsInverseTable is the table name for the Step entity.
	// It exists in this package in order to avoid circular dependency with the "step" package.
	StepsInverseTable = "steps"
	// StepsColumn is the table column denoting the steps relation/edge.
	StepsColumn = "recipe_steps"
	// RecipeIngredientsTable is the table that holds the recipe_ingredients relation/edge.
	RecipeIngredientsTable = "recipe_ingredients"
	// RecipeIngredientsInverseTable is the table name for the RecipeIngredient entity.
	// It exists in this package in order to avoid circular dependency with the "recipeingredient" package.
	RecipeIngredientsInverseTable = "recipe_ingredients"
	// RecipeIngredientsColumn is the table column denoting the recipe_ingredients relation/edge.
	RecipeIngredientsColumn = "recipe_recipe_ingredients"
)

// Columns holds all SQL columns for recipe fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldServings,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "recipes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_recipes",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"recipe_id", "category_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
