// Code generated by entc, DO NOT EDIT.

package recipe

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Servings applies equality check predicate on the "servings" field. It's identical to ServingsEQ.
func Servings(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServings), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Recipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Recipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ServingsEQ applies the EQ predicate on the "servings" field.
func ServingsEQ(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServings), v))
	})
}

// ServingsNEQ applies the NEQ predicate on the "servings" field.
func ServingsNEQ(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServings), v))
	})
}

// ServingsIn applies the In predicate on the "servings" field.
func ServingsIn(vs ...int) predicate.Recipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServings), v...))
	})
}

// ServingsNotIn applies the NotIn predicate on the "servings" field.
func ServingsNotIn(vs ...int) predicate.Recipe {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recipe(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServings), v...))
	})
}

// ServingsGT applies the GT predicate on the "servings" field.
func ServingsGT(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServings), v))
	})
}

// ServingsGTE applies the GTE predicate on the "servings" field.
func ServingsGTE(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServings), v))
	})
}

// ServingsLT applies the LT predicate on the "servings" field.
func ServingsLT(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServings), v))
	})
}

// ServingsLTE applies the LTE predicate on the "servings" field.
func ServingsLTE(v int) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServings), v))
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Category) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSteps applies the HasEdge predicate on the "steps" edge.
func HasSteps() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StepsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StepsTable, StepsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStepsWith applies the HasEdge predicate on the "steps" edge with a given conditions (other predicates).
func HasStepsWith(preds ...predicate.Step) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StepsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StepsTable, StepsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRecipeIngredients applies the HasEdge predicate on the "recipe_ingredients" edge.
func HasRecipeIngredients() predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecipeIngredientsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecipeIngredientsTable, RecipeIngredientsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRecipeIngredientsWith applies the HasEdge predicate on the "recipe_ingredients" edge with a given conditions (other predicates).
func HasRecipeIngredientsWith(preds ...predicate.RecipeIngredient) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RecipeIngredientsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RecipeIngredientsTable, RecipeIngredientsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recipe) predicate.Recipe {
	return predicate.Recipe(func(s *sql.Selector) {
		p(s.Not())
	})
}
