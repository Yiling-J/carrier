// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/migrate"

	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/category"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/ingredient"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/recipe"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/recipeingredient"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/step"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Ingredient is the client for interacting with the Ingredient builders.
	Ingredient *IngredientClient
	// Recipe is the client for interacting with the Recipe builders.
	Recipe *RecipeClient
	// RecipeIngredient is the client for interacting with the RecipeIngredient builders.
	RecipeIngredient *RecipeIngredientClient
	// Step is the client for interacting with the Step builders.
	Step *StepClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Category = NewCategoryClient(c.config)
	c.Ingredient = NewIngredientClient(c.config)
	c.Recipe = NewRecipeClient(c.config)
	c.RecipeIngredient = NewRecipeIngredientClient(c.config)
	c.Step = NewStepClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Category:         NewCategoryClient(cfg),
		Ingredient:       NewIngredientClient(cfg),
		Recipe:           NewRecipeClient(cfg),
		RecipeIngredient: NewRecipeIngredientClient(cfg),
		Step:             NewStepClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:           cfg,
		Category:         NewCategoryClient(cfg),
		Ingredient:       NewIngredientClient(cfg),
		Recipe:           NewRecipeClient(cfg),
		RecipeIngredient: NewRecipeIngredientClient(cfg),
		Step:             NewStepClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Category.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Category.Use(hooks...)
	c.Ingredient.Use(hooks...)
	c.Recipe.Use(hooks...)
	c.RecipeIngredient.Use(hooks...)
	c.Step.Use(hooks...)
	c.User.Use(hooks...)
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipe queries the recipe edge of a Category.
func (c *CategoryClient) QueryRecipe(ca *Category) *RecipeQuery {
	query := &RecipeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, category.RecipeTable, category.RecipePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// IngredientClient is a client for the Ingredient schema.
type IngredientClient struct {
	config
}

// NewIngredientClient returns a client for the Ingredient from the given config.
func NewIngredientClient(c config) *IngredientClient {
	return &IngredientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ingredient.Hooks(f(g(h())))`.
func (c *IngredientClient) Use(hooks ...Hook) {
	c.hooks.Ingredient = append(c.hooks.Ingredient, hooks...)
}

// Create returns a create builder for Ingredient.
func (c *IngredientClient) Create() *IngredientCreate {
	mutation := newIngredientMutation(c.config, OpCreate)
	return &IngredientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Ingredient entities.
func (c *IngredientClient) CreateBulk(builders ...*IngredientCreate) *IngredientCreateBulk {
	return &IngredientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Ingredient.
func (c *IngredientClient) Update() *IngredientUpdate {
	mutation := newIngredientMutation(c.config, OpUpdate)
	return &IngredientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IngredientClient) UpdateOne(i *Ingredient) *IngredientUpdateOne {
	mutation := newIngredientMutation(c.config, OpUpdateOne, withIngredient(i))
	return &IngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IngredientClient) UpdateOneID(id int) *IngredientUpdateOne {
	mutation := newIngredientMutation(c.config, OpUpdateOne, withIngredientID(id))
	return &IngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ingredient.
func (c *IngredientClient) Delete() *IngredientDelete {
	mutation := newIngredientMutation(c.config, OpDelete)
	return &IngredientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IngredientClient) DeleteOne(i *Ingredient) *IngredientDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IngredientClient) DeleteOneID(id int) *IngredientDeleteOne {
	builder := c.Delete().Where(ingredient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IngredientDeleteOne{builder}
}

// Query returns a query builder for Ingredient.
func (c *IngredientClient) Query() *IngredientQuery {
	return &IngredientQuery{
		config: c.config,
	}
}

// Get returns a Ingredient entity by its id.
func (c *IngredientClient) Get(ctx context.Context, id int) (*Ingredient, error) {
	return c.Query().Where(ingredient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IngredientClient) GetX(ctx context.Context, id int) *Ingredient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipeIngredients queries the recipe_ingredients edge of a Ingredient.
func (c *IngredientClient) QueryRecipeIngredients(i *Ingredient) *RecipeIngredientQuery {
	query := &RecipeIngredientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ingredient.Table, ingredient.FieldID, id),
			sqlgraph.To(recipeingredient.Table, recipeingredient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ingredient.RecipeIngredientsTable, ingredient.RecipeIngredientsColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IngredientClient) Hooks() []Hook {
	return c.hooks.Ingredient
}

// RecipeClient is a client for the Recipe schema.
type RecipeClient struct {
	config
}

// NewRecipeClient returns a client for the Recipe from the given config.
func NewRecipeClient(c config) *RecipeClient {
	return &RecipeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recipe.Hooks(f(g(h())))`.
func (c *RecipeClient) Use(hooks ...Hook) {
	c.hooks.Recipe = append(c.hooks.Recipe, hooks...)
}

// Create returns a create builder for Recipe.
func (c *RecipeClient) Create() *RecipeCreate {
	mutation := newRecipeMutation(c.config, OpCreate)
	return &RecipeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Recipe entities.
func (c *RecipeClient) CreateBulk(builders ...*RecipeCreate) *RecipeCreateBulk {
	return &RecipeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recipe.
func (c *RecipeClient) Update() *RecipeUpdate {
	mutation := newRecipeMutation(c.config, OpUpdate)
	return &RecipeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecipeClient) UpdateOne(r *Recipe) *RecipeUpdateOne {
	mutation := newRecipeMutation(c.config, OpUpdateOne, withRecipe(r))
	return &RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecipeClient) UpdateOneID(id int) *RecipeUpdateOne {
	mutation := newRecipeMutation(c.config, OpUpdateOne, withRecipeID(id))
	return &RecipeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recipe.
func (c *RecipeClient) Delete() *RecipeDelete {
	mutation := newRecipeMutation(c.config, OpDelete)
	return &RecipeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecipeClient) DeleteOne(r *Recipe) *RecipeDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecipeClient) DeleteOneID(id int) *RecipeDeleteOne {
	builder := c.Delete().Where(recipe.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecipeDeleteOne{builder}
}

// Query returns a query builder for Recipe.
func (c *RecipeClient) Query() *RecipeQuery {
	return &RecipeQuery{
		config: c.config,
	}
}

// Get returns a Recipe entity by its id.
func (c *RecipeClient) Get(ctx context.Context, id int) (*Recipe, error) {
	return c.Query().Where(recipe.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecipeClient) GetX(ctx context.Context, id int) *Recipe {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Recipe.
func (c *RecipeClient) QueryAuthor(r *Recipe) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recipe.AuthorTable, recipe.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Recipe.
func (c *RecipeClient) QueryTags(r *Recipe) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, recipe.TagsTable, recipe.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySteps queries the steps edge of a Recipe.
func (c *RecipeClient) QuerySteps(r *Recipe) *StepQuery {
	query := &StepQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, id),
			sqlgraph.To(step.Table, step.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipe.StepsTable, recipe.StepsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRecipeIngredients queries the recipe_ingredients edge of a Recipe.
func (c *RecipeClient) QueryRecipeIngredients(r *Recipe) *RecipeIngredientQuery {
	query := &RecipeIngredientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipe.Table, recipe.FieldID, id),
			sqlgraph.To(recipeingredient.Table, recipeingredient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, recipe.RecipeIngredientsTable, recipe.RecipeIngredientsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecipeClient) Hooks() []Hook {
	return c.hooks.Recipe
}

// RecipeIngredientClient is a client for the RecipeIngredient schema.
type RecipeIngredientClient struct {
	config
}

// NewRecipeIngredientClient returns a client for the RecipeIngredient from the given config.
func NewRecipeIngredientClient(c config) *RecipeIngredientClient {
	return &RecipeIngredientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recipeingredient.Hooks(f(g(h())))`.
func (c *RecipeIngredientClient) Use(hooks ...Hook) {
	c.hooks.RecipeIngredient = append(c.hooks.RecipeIngredient, hooks...)
}

// Create returns a create builder for RecipeIngredient.
func (c *RecipeIngredientClient) Create() *RecipeIngredientCreate {
	mutation := newRecipeIngredientMutation(c.config, OpCreate)
	return &RecipeIngredientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RecipeIngredient entities.
func (c *RecipeIngredientClient) CreateBulk(builders ...*RecipeIngredientCreate) *RecipeIngredientCreateBulk {
	return &RecipeIngredientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RecipeIngredient.
func (c *RecipeIngredientClient) Update() *RecipeIngredientUpdate {
	mutation := newRecipeIngredientMutation(c.config, OpUpdate)
	return &RecipeIngredientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecipeIngredientClient) UpdateOne(ri *RecipeIngredient) *RecipeIngredientUpdateOne {
	mutation := newRecipeIngredientMutation(c.config, OpUpdateOne, withRecipeIngredient(ri))
	return &RecipeIngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecipeIngredientClient) UpdateOneID(id int) *RecipeIngredientUpdateOne {
	mutation := newRecipeIngredientMutation(c.config, OpUpdateOne, withRecipeIngredientID(id))
	return &RecipeIngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RecipeIngredient.
func (c *RecipeIngredientClient) Delete() *RecipeIngredientDelete {
	mutation := newRecipeIngredientMutation(c.config, OpDelete)
	return &RecipeIngredientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecipeIngredientClient) DeleteOne(ri *RecipeIngredient) *RecipeIngredientDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecipeIngredientClient) DeleteOneID(id int) *RecipeIngredientDeleteOne {
	builder := c.Delete().Where(recipeingredient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecipeIngredientDeleteOne{builder}
}

// Query returns a query builder for RecipeIngredient.
func (c *RecipeIngredientClient) Query() *RecipeIngredientQuery {
	return &RecipeIngredientQuery{
		config: c.config,
	}
}

// Get returns a RecipeIngredient entity by its id.
func (c *RecipeIngredientClient) Get(ctx context.Context, id int) (*RecipeIngredient, error) {
	return c.Query().Where(recipeingredient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecipeIngredientClient) GetX(ctx context.Context, id int) *RecipeIngredient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryIngredient queries the ingredient edge of a RecipeIngredient.
func (c *RecipeIngredientClient) QueryIngredient(ri *RecipeIngredient) *IngredientQuery {
	query := &IngredientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recipeingredient.Table, recipeingredient.FieldID, id),
			sqlgraph.To(ingredient.Table, ingredient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recipeingredient.IngredientTable, recipeingredient.IngredientColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecipeIngredientClient) Hooks() []Hook {
	return c.hooks.RecipeIngredient
}

// StepClient is a client for the Step schema.
type StepClient struct {
	config
}

// NewStepClient returns a client for the Step from the given config.
func NewStepClient(c config) *StepClient {
	return &StepClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `step.Hooks(f(g(h())))`.
func (c *StepClient) Use(hooks ...Hook) {
	c.hooks.Step = append(c.hooks.Step, hooks...)
}

// Create returns a create builder for Step.
func (c *StepClient) Create() *StepCreate {
	mutation := newStepMutation(c.config, OpCreate)
	return &StepCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Step entities.
func (c *StepClient) CreateBulk(builders ...*StepCreate) *StepCreateBulk {
	return &StepCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Step.
func (c *StepClient) Update() *StepUpdate {
	mutation := newStepMutation(c.config, OpUpdate)
	return &StepUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StepClient) UpdateOne(s *Step) *StepUpdateOne {
	mutation := newStepMutation(c.config, OpUpdateOne, withStep(s))
	return &StepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StepClient) UpdateOneID(id int) *StepUpdateOne {
	mutation := newStepMutation(c.config, OpUpdateOne, withStepID(id))
	return &StepUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Step.
func (c *StepClient) Delete() *StepDelete {
	mutation := newStepMutation(c.config, OpDelete)
	return &StepDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StepClient) DeleteOne(s *Step) *StepDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StepClient) DeleteOneID(id int) *StepDeleteOne {
	builder := c.Delete().Where(step.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StepDeleteOne{builder}
}

// Query returns a query builder for Step.
func (c *StepClient) Query() *StepQuery {
	return &StepQuery{
		config: c.config,
	}
}

// Get returns a Step entity by its id.
func (c *StepClient) Get(ctx context.Context, id int) (*Step, error) {
	return c.Query().Where(step.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StepClient) GetX(ctx context.Context, id int) *Step {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipe queries the recipe edge of a Step.
func (c *StepClient) QueryRecipe(s *Step) *RecipeQuery {
	query := &RecipeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(step.Table, step.FieldID, id),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, step.RecipeTable, step.RecipeColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StepClient) Hooks() []Hook {
	return c.hooks.Step
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRecipes queries the recipes edge of a User.
func (c *UserClient) QueryRecipes(u *User) *RecipeQuery {
	query := &RecipeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recipe.Table, recipe.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RecipesTable, user.RecipesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
