// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/recipe"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/step"
)

// Step is the model entity for the Step schema.
type Step struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StepQuery when eager-loading is set.
	Edges        StepEdges `json:"edges"`
	recipe_steps *int
}

// StepEdges holds the relations/edges for other nodes in the graph.
type StepEdges struct {
	// Recipe holds the value of the recipe edge.
	Recipe *Recipe `json:"recipe,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecipeOrErr returns the Recipe value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepEdges) RecipeOrErr() (*Recipe, error) {
	if e.loadedTypes[0] {
		if e.Recipe == nil {
			// The edge recipe was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: recipe.Label}
		}
		return e.Recipe, nil
	}
	return nil, &NotLoadedError{edge: "recipe"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Step) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case step.FieldID:
			values[i] = new(sql.NullInt64)
		case step.FieldText:
			values[i] = new(sql.NullString)
		case step.ForeignKeys[0]: // recipe_steps
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Step", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Step fields.
func (s *Step) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case step.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case step.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				s.Text = value.String
			}
		case step.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field recipe_steps", value)
			} else if value.Valid {
				s.recipe_steps = new(int)
				*s.recipe_steps = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRecipe queries the "recipe" edge of the Step entity.
func (s *Step) QueryRecipe() *RecipeQuery {
	return (&StepClient{config: s.config}).QueryRecipe(s)
}

// Update returns a builder for updating this Step.
// Note that you need to call Step.Unwrap() before calling this method if this Step
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Step) Update() *StepUpdateOne {
	return (&StepClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Step entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Step) Unwrap() *Step {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Step is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Step) String() string {
	var builder strings.Builder
	builder.WriteString("Step(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", text=")
	builder.WriteString(s.Text)
	builder.WriteByte(')')
	return builder.String()
}

// Steps is a parsable slice of Step.
type Steps []*Step

func (s Steps) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
