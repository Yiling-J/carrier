// Code generated by entc, DO NOT EDIT.

package recipeingredient

const (
	// Label holds the string label denoting the recipeingredient type in the database.
	Label = "recipe_ingredient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// EdgeIngredient holds the string denoting the ingredient edge name in mutations.
	EdgeIngredient = "ingredient"
	// Table holds the table name of the recipeingredient in the database.
	Table = "recipe_ingredients"
	// IngredientTable is the table that holds the ingredient relation/edge.
	IngredientTable = "recipe_ingredients"
	// IngredientInverseTable is the table name for the Ingredient entity.
	// It exists in this package in order to avoid circular dependency with the "ingredient" package.
	IngredientInverseTable = "ingredients"
	// IngredientColumn is the table column denoting the ingredient relation/edge.
	IngredientColumn = "ingredient_recipe_ingredients"
)

// Columns holds all SQL columns for recipeingredient fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
	FieldUnit,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "recipe_ingredients"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ingredient_recipe_ingredients",
	"recipe_recipe_ingredients",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
