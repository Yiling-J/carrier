// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/category"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/ingredient"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/predicate"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/recipe"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/recipeingredient"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/step"
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCategory         = "Category"
	TypeIngredient       = "Ingredient"
	TypeRecipe           = "Recipe"
	TypeRecipeIngredient = "RecipeIngredient"
	TypeStep             = "Step"
	TypeUser             = "User"
)

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	recipe        map[int]struct{}
	removedrecipe map[int]struct{}
	clearedrecipe bool
	done          bool
	oldValue      func(context.Context) (*Category, error)
	predicates    []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id int) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// AddRecipeIDs adds the "recipe" edge to the Recipe entity by ids.
func (m *CategoryMutation) AddRecipeIDs(ids ...int) {
	if m.recipe == nil {
		m.recipe = make(map[int]struct{})
	}
	for i := range ids {
		m.recipe[ids[i]] = struct{}{}
	}
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (m *CategoryMutation) ClearRecipe() {
	m.clearedrecipe = true
}

// RecipeCleared reports if the "recipe" edge to the Recipe entity was cleared.
func (m *CategoryMutation) RecipeCleared() bool {
	return m.clearedrecipe
}

// RemoveRecipeIDs removes the "recipe" edge to the Recipe entity by IDs.
func (m *CategoryMutation) RemoveRecipeIDs(ids ...int) {
	if m.removedrecipe == nil {
		m.removedrecipe = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipe, ids[i])
		m.removedrecipe[ids[i]] = struct{}{}
	}
}

// RemovedRecipe returns the removed IDs of the "recipe" edge to the Recipe entity.
func (m *CategoryMutation) RemovedRecipeIDs() (ids []int) {
	for id := range m.removedrecipe {
		ids = append(ids, id)
	}
	return
}

// RecipeIDs returns the "recipe" edge IDs in the mutation.
func (m *CategoryMutation) RecipeIDs() (ids []int) {
	for id := range m.recipe {
		ids = append(ids, id)
	}
	return
}

// ResetRecipe resets all changes to the "recipe" edge.
func (m *CategoryMutation) ResetRecipe() {
	m.recipe = nil
	m.clearedrecipe = false
	m.removedrecipe = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipe != nil {
		edges = append(edges, category.EdgeRecipe)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeRecipe:
		ids := make([]ent.Value, 0, len(m.recipe))
		for id := range m.recipe {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecipe != nil {
		edges = append(edges, category.EdgeRecipe)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeRecipe:
		ids := make([]ent.Value, 0, len(m.removedrecipe))
		for id := range m.removedrecipe {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipe {
		edges = append(edges, category.EdgeRecipe)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeRecipe:
		return m.clearedrecipe
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeRecipe:
		m.ResetRecipe()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// IngredientMutation represents an operation that mutates the Ingredient nodes in the graph.
type IngredientMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	clearedFields             map[string]struct{}
	recipe_ingredients        map[int]struct{}
	removedrecipe_ingredients map[int]struct{}
	clearedrecipe_ingredients bool
	done                      bool
	oldValue                  func(context.Context) (*Ingredient, error)
	predicates                []predicate.Ingredient
}

var _ ent.Mutation = (*IngredientMutation)(nil)

// ingredientOption allows management of the mutation configuration using functional options.
type ingredientOption func(*IngredientMutation)

// newIngredientMutation creates new mutation for the Ingredient entity.
func newIngredientMutation(c config, op Op, opts ...ingredientOption) *IngredientMutation {
	m := &IngredientMutation{
		config:        c,
		op:            op,
		typ:           TypeIngredient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIngredientID sets the ID field of the mutation.
func withIngredientID(id int) ingredientOption {
	return func(m *IngredientMutation) {
		var (
			err   error
			once  sync.Once
			value *Ingredient
		)
		m.oldValue = func(ctx context.Context) (*Ingredient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ingredient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIngredient sets the old Ingredient of the mutation.
func withIngredient(node *Ingredient) ingredientOption {
	return func(m *IngredientMutation) {
		m.oldValue = func(context.Context) (*Ingredient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IngredientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IngredientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IngredientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *IngredientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IngredientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IngredientMutation) ResetName() {
	m.name = nil
}

// AddRecipeIngredientIDs adds the "recipe_ingredients" edge to the RecipeIngredient entity by ids.
func (m *IngredientMutation) AddRecipeIngredientIDs(ids ...int) {
	if m.recipe_ingredients == nil {
		m.recipe_ingredients = make(map[int]struct{})
	}
	for i := range ids {
		m.recipe_ingredients[ids[i]] = struct{}{}
	}
}

// ClearRecipeIngredients clears the "recipe_ingredients" edge to the RecipeIngredient entity.
func (m *IngredientMutation) ClearRecipeIngredients() {
	m.clearedrecipe_ingredients = true
}

// RecipeIngredientsCleared reports if the "recipe_ingredients" edge to the RecipeIngredient entity was cleared.
func (m *IngredientMutation) RecipeIngredientsCleared() bool {
	return m.clearedrecipe_ingredients
}

// RemoveRecipeIngredientIDs removes the "recipe_ingredients" edge to the RecipeIngredient entity by IDs.
func (m *IngredientMutation) RemoveRecipeIngredientIDs(ids ...int) {
	if m.removedrecipe_ingredients == nil {
		m.removedrecipe_ingredients = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipe_ingredients, ids[i])
		m.removedrecipe_ingredients[ids[i]] = struct{}{}
	}
}

// RemovedRecipeIngredients returns the removed IDs of the "recipe_ingredients" edge to the RecipeIngredient entity.
func (m *IngredientMutation) RemovedRecipeIngredientsIDs() (ids []int) {
	for id := range m.removedrecipe_ingredients {
		ids = append(ids, id)
	}
	return
}

// RecipeIngredientsIDs returns the "recipe_ingredients" edge IDs in the mutation.
func (m *IngredientMutation) RecipeIngredientsIDs() (ids []int) {
	for id := range m.recipe_ingredients {
		ids = append(ids, id)
	}
	return
}

// ResetRecipeIngredients resets all changes to the "recipe_ingredients" edge.
func (m *IngredientMutation) ResetRecipeIngredients() {
	m.recipe_ingredients = nil
	m.clearedrecipe_ingredients = false
	m.removedrecipe_ingredients = nil
}

// Where appends a list predicates to the IngredientMutation builder.
func (m *IngredientMutation) Where(ps ...predicate.Ingredient) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IngredientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ingredient).
func (m *IngredientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IngredientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, ingredient.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IngredientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ingredient.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IngredientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ingredient.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Ingredient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ingredient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Ingredient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IngredientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IngredientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ingredient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IngredientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IngredientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IngredientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ingredient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IngredientMutation) ResetField(name string) error {
	switch name {
	case ingredient.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Ingredient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IngredientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipe_ingredients != nil {
		edges = append(edges, ingredient.EdgeRecipeIngredients)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IngredientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ingredient.EdgeRecipeIngredients:
		ids := make([]ent.Value, 0, len(m.recipe_ingredients))
		for id := range m.recipe_ingredients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IngredientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecipe_ingredients != nil {
		edges = append(edges, ingredient.EdgeRecipeIngredients)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IngredientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ingredient.EdgeRecipeIngredients:
		ids := make([]ent.Value, 0, len(m.removedrecipe_ingredients))
		for id := range m.removedrecipe_ingredients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IngredientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipe_ingredients {
		edges = append(edges, ingredient.EdgeRecipeIngredients)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IngredientMutation) EdgeCleared(name string) bool {
	switch name {
	case ingredient.EdgeRecipeIngredients:
		return m.clearedrecipe_ingredients
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IngredientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Ingredient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IngredientMutation) ResetEdge(name string) error {
	switch name {
	case ingredient.EdgeRecipeIngredients:
		m.ResetRecipeIngredients()
		return nil
	}
	return fmt.Errorf("unknown Ingredient edge %s", name)
}

// RecipeMutation represents an operation that mutates the Recipe nodes in the graph.
type RecipeMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	name                      *string
	servings                  *int
	addservings               *int
	clearedFields             map[string]struct{}
	author                    *int
	clearedauthor             bool
	tags                      map[int]struct{}
	removedtags               map[int]struct{}
	clearedtags               bool
	steps                     map[int]struct{}
	removedsteps              map[int]struct{}
	clearedsteps              bool
	recipe_ingredients        map[int]struct{}
	removedrecipe_ingredients map[int]struct{}
	clearedrecipe_ingredients bool
	done                      bool
	oldValue                  func(context.Context) (*Recipe, error)
	predicates                []predicate.Recipe
}

var _ ent.Mutation = (*RecipeMutation)(nil)

// recipeOption allows management of the mutation configuration using functional options.
type recipeOption func(*RecipeMutation)

// newRecipeMutation creates new mutation for the Recipe entity.
func newRecipeMutation(c config, op Op, opts ...recipeOption) *RecipeMutation {
	m := &RecipeMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeID sets the ID field of the mutation.
func withRecipeID(id int) recipeOption {
	return func(m *RecipeMutation) {
		var (
			err   error
			once  sync.Once
			value *Recipe
		)
		m.oldValue = func(ctx context.Context) (*Recipe, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recipe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipe sets the old Recipe of the mutation.
func withRecipe(node *Recipe) recipeOption {
	return func(m *RecipeMutation) {
		m.oldValue = func(context.Context) (*Recipe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *RecipeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RecipeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RecipeMutation) ResetName() {
	m.name = nil
}

// SetServings sets the "servings" field.
func (m *RecipeMutation) SetServings(i int) {
	m.servings = &i
	m.addservings = nil
}

// Servings returns the value of the "servings" field in the mutation.
func (m *RecipeMutation) Servings() (r int, exists bool) {
	v := m.servings
	if v == nil {
		return
	}
	return *v, true
}

// OldServings returns the old "servings" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldServings(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldServings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldServings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServings: %w", err)
	}
	return oldValue.Servings, nil
}

// AddServings adds i to the "servings" field.
func (m *RecipeMutation) AddServings(i int) {
	if m.addservings != nil {
		*m.addservings += i
	} else {
		m.addservings = &i
	}
}

// AddedServings returns the value that was added to the "servings" field in this mutation.
func (m *RecipeMutation) AddedServings() (r int, exists bool) {
	v := m.addservings
	if v == nil {
		return
	}
	return *v, true
}

// ResetServings resets all changes to the "servings" field.
func (m *RecipeMutation) ResetServings() {
	m.servings = nil
	m.addservings = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *RecipeMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *RecipeMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *RecipeMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *RecipeMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *RecipeMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *RecipeMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddTagIDs adds the "tags" edge to the Category entity by ids.
func (m *RecipeMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Category entity.
func (m *RecipeMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Category entity was cleared.
func (m *RecipeMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Category entity by IDs.
func (m *RecipeMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Category entity.
func (m *RecipeMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *RecipeMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *RecipeMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddStepIDs adds the "steps" edge to the Step entity by ids.
func (m *RecipeMutation) AddStepIDs(ids ...int) {
	if m.steps == nil {
		m.steps = make(map[int]struct{})
	}
	for i := range ids {
		m.steps[ids[i]] = struct{}{}
	}
}

// ClearSteps clears the "steps" edge to the Step entity.
func (m *RecipeMutation) ClearSteps() {
	m.clearedsteps = true
}

// StepsCleared reports if the "steps" edge to the Step entity was cleared.
func (m *RecipeMutation) StepsCleared() bool {
	return m.clearedsteps
}

// RemoveStepIDs removes the "steps" edge to the Step entity by IDs.
func (m *RecipeMutation) RemoveStepIDs(ids ...int) {
	if m.removedsteps == nil {
		m.removedsteps = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.steps, ids[i])
		m.removedsteps[ids[i]] = struct{}{}
	}
}

// RemovedSteps returns the removed IDs of the "steps" edge to the Step entity.
func (m *RecipeMutation) RemovedStepsIDs() (ids []int) {
	for id := range m.removedsteps {
		ids = append(ids, id)
	}
	return
}

// StepsIDs returns the "steps" edge IDs in the mutation.
func (m *RecipeMutation) StepsIDs() (ids []int) {
	for id := range m.steps {
		ids = append(ids, id)
	}
	return
}

// ResetSteps resets all changes to the "steps" edge.
func (m *RecipeMutation) ResetSteps() {
	m.steps = nil
	m.clearedsteps = false
	m.removedsteps = nil
}

// AddRecipeIngredientIDs adds the "recipe_ingredients" edge to the RecipeIngredient entity by ids.
func (m *RecipeMutation) AddRecipeIngredientIDs(ids ...int) {
	if m.recipe_ingredients == nil {
		m.recipe_ingredients = make(map[int]struct{})
	}
	for i := range ids {
		m.recipe_ingredients[ids[i]] = struct{}{}
	}
}

// ClearRecipeIngredients clears the "recipe_ingredients" edge to the RecipeIngredient entity.
func (m *RecipeMutation) ClearRecipeIngredients() {
	m.clearedrecipe_ingredients = true
}

// RecipeIngredientsCleared reports if the "recipe_ingredients" edge to the RecipeIngredient entity was cleared.
func (m *RecipeMutation) RecipeIngredientsCleared() bool {
	return m.clearedrecipe_ingredients
}

// RemoveRecipeIngredientIDs removes the "recipe_ingredients" edge to the RecipeIngredient entity by IDs.
func (m *RecipeMutation) RemoveRecipeIngredientIDs(ids ...int) {
	if m.removedrecipe_ingredients == nil {
		m.removedrecipe_ingredients = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipe_ingredients, ids[i])
		m.removedrecipe_ingredients[ids[i]] = struct{}{}
	}
}

// RemovedRecipeIngredients returns the removed IDs of the "recipe_ingredients" edge to the RecipeIngredient entity.
func (m *RecipeMutation) RemovedRecipeIngredientsIDs() (ids []int) {
	for id := range m.removedrecipe_ingredients {
		ids = append(ids, id)
	}
	return
}

// RecipeIngredientsIDs returns the "recipe_ingredients" edge IDs in the mutation.
func (m *RecipeMutation) RecipeIngredientsIDs() (ids []int) {
	for id := range m.recipe_ingredients {
		ids = append(ids, id)
	}
	return
}

// ResetRecipeIngredients resets all changes to the "recipe_ingredients" edge.
func (m *RecipeMutation) ResetRecipeIngredients() {
	m.recipe_ingredients = nil
	m.clearedrecipe_ingredients = false
	m.removedrecipe_ingredients = nil
}

// Where appends a list predicates to the RecipeMutation builder.
func (m *RecipeMutation) Where(ps ...predicate.Recipe) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RecipeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Recipe).
func (m *RecipeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, recipe.FieldName)
	}
	if m.servings != nil {
		fields = append(fields, recipe.FieldServings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldName:
		return m.Name()
	case recipe.FieldServings:
		return m.Servings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipe.FieldName:
		return m.OldName(ctx)
	case recipe.FieldServings:
		return m.OldServings(ctx)
	}
	return nil, fmt.Errorf("unknown Recipe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case recipe.FieldServings:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServings(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeMutation) AddedFields() []string {
	var fields []string
	if m.addservings != nil {
		fields = append(fields, recipe.FieldServings)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldServings:
		return m.AddedServings()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldServings:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddServings(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Recipe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeMutation) ResetField(name string) error {
	switch name {
	case recipe.FieldName:
		m.ResetName()
		return nil
	case recipe.FieldServings:
		m.ResetServings()
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.author != nil {
		edges = append(edges, recipe.EdgeAuthor)
	}
	if m.tags != nil {
		edges = append(edges, recipe.EdgeTags)
	}
	if m.steps != nil {
		edges = append(edges, recipe.EdgeSteps)
	}
	if m.recipe_ingredients != nil {
		edges = append(edges, recipe.EdgeRecipeIngredients)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case recipe.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case recipe.EdgeSteps:
		ids := make([]ent.Value, 0, len(m.steps))
		for id := range m.steps {
			ids = append(ids, id)
		}
		return ids
	case recipe.EdgeRecipeIngredients:
		ids := make([]ent.Value, 0, len(m.recipe_ingredients))
		for id := range m.recipe_ingredients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtags != nil {
		edges = append(edges, recipe.EdgeTags)
	}
	if m.removedsteps != nil {
		edges = append(edges, recipe.EdgeSteps)
	}
	if m.removedrecipe_ingredients != nil {
		edges = append(edges, recipe.EdgeRecipeIngredients)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case recipe.EdgeSteps:
		ids := make([]ent.Value, 0, len(m.removedsteps))
		for id := range m.removedsteps {
			ids = append(ids, id)
		}
		return ids
	case recipe.EdgeRecipeIngredients:
		ids := make([]ent.Value, 0, len(m.removedrecipe_ingredients))
		for id := range m.removedrecipe_ingredients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedauthor {
		edges = append(edges, recipe.EdgeAuthor)
	}
	if m.clearedtags {
		edges = append(edges, recipe.EdgeTags)
	}
	if m.clearedsteps {
		edges = append(edges, recipe.EdgeSteps)
	}
	if m.clearedrecipe_ingredients {
		edges = append(edges, recipe.EdgeRecipeIngredients)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeMutation) EdgeCleared(name string) bool {
	switch name {
	case recipe.EdgeAuthor:
		return m.clearedauthor
	case recipe.EdgeTags:
		return m.clearedtags
	case recipe.EdgeSteps:
		return m.clearedsteps
	case recipe.EdgeRecipeIngredients:
		return m.clearedrecipe_ingredients
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeMutation) ClearEdge(name string) error {
	switch name {
	case recipe.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Recipe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeMutation) ResetEdge(name string) error {
	switch name {
	case recipe.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case recipe.EdgeTags:
		m.ResetTags()
		return nil
	case recipe.EdgeSteps:
		m.ResetSteps()
		return nil
	case recipe.EdgeRecipeIngredients:
		m.ResetRecipeIngredients()
		return nil
	}
	return fmt.Errorf("unknown Recipe edge %s", name)
}

// RecipeIngredientMutation represents an operation that mutates the RecipeIngredient nodes in the graph.
type RecipeIngredientMutation struct {
	config
	op                Op
	typ               string
	id                *int
	quantity          *float32
	addquantity       *float32
	unit              *string
	clearedFields     map[string]struct{}
	ingredient        *int
	clearedingredient bool
	done              bool
	oldValue          func(context.Context) (*RecipeIngredient, error)
	predicates        []predicate.RecipeIngredient
}

var _ ent.Mutation = (*RecipeIngredientMutation)(nil)

// recipeingredientOption allows management of the mutation configuration using functional options.
type recipeingredientOption func(*RecipeIngredientMutation)

// newRecipeIngredientMutation creates new mutation for the RecipeIngredient entity.
func newRecipeIngredientMutation(c config, op Op, opts ...recipeingredientOption) *RecipeIngredientMutation {
	m := &RecipeIngredientMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipeIngredient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeIngredientID sets the ID field of the mutation.
func withRecipeIngredientID(id int) recipeingredientOption {
	return func(m *RecipeIngredientMutation) {
		var (
			err   error
			once  sync.Once
			value *RecipeIngredient
		)
		m.oldValue = func(ctx context.Context) (*RecipeIngredient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RecipeIngredient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipeIngredient sets the old RecipeIngredient of the mutation.
func withRecipeIngredient(node *RecipeIngredient) recipeingredientOption {
	return func(m *RecipeIngredientMutation) {
		m.oldValue = func(context.Context) (*RecipeIngredient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeIngredientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeIngredientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeIngredientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetQuantity sets the "quantity" field.
func (m *RecipeIngredientMutation) SetQuantity(f float32) {
	m.quantity = &f
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *RecipeIngredientMutation) Quantity() (r float32, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the RecipeIngredient entity.
// If the RecipeIngredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeIngredientMutation) OldQuantity(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds f to the "quantity" field.
func (m *RecipeIngredientMutation) AddQuantity(f float32) {
	if m.addquantity != nil {
		*m.addquantity += f
	} else {
		m.addquantity = &f
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *RecipeIngredientMutation) AddedQuantity() (r float32, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *RecipeIngredientMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetUnit sets the "unit" field.
func (m *RecipeIngredientMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *RecipeIngredientMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the RecipeIngredient entity.
// If the RecipeIngredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeIngredientMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *RecipeIngredientMutation) ResetUnit() {
	m.unit = nil
}

// SetIngredientID sets the "ingredient" edge to the Ingredient entity by id.
func (m *RecipeIngredientMutation) SetIngredientID(id int) {
	m.ingredient = &id
}

// ClearIngredient clears the "ingredient" edge to the Ingredient entity.
func (m *RecipeIngredientMutation) ClearIngredient() {
	m.clearedingredient = true
}

// IngredientCleared reports if the "ingredient" edge to the Ingredient entity was cleared.
func (m *RecipeIngredientMutation) IngredientCleared() bool {
	return m.clearedingredient
}

// IngredientID returns the "ingredient" edge ID in the mutation.
func (m *RecipeIngredientMutation) IngredientID() (id int, exists bool) {
	if m.ingredient != nil {
		return *m.ingredient, true
	}
	return
}

// IngredientIDs returns the "ingredient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IngredientID instead. It exists only for internal usage by the builders.
func (m *RecipeIngredientMutation) IngredientIDs() (ids []int) {
	if id := m.ingredient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIngredient resets all changes to the "ingredient" edge.
func (m *RecipeIngredientMutation) ResetIngredient() {
	m.ingredient = nil
	m.clearedingredient = false
}

// Where appends a list predicates to the RecipeIngredientMutation builder.
func (m *RecipeIngredientMutation) Where(ps ...predicate.RecipeIngredient) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RecipeIngredientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RecipeIngredient).
func (m *RecipeIngredientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeIngredientMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.quantity != nil {
		fields = append(fields, recipeingredient.FieldQuantity)
	}
	if m.unit != nil {
		fields = append(fields, recipeingredient.FieldUnit)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeIngredientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipeingredient.FieldQuantity:
		return m.Quantity()
	case recipeingredient.FieldUnit:
		return m.Unit()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeIngredientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipeingredient.FieldQuantity:
		return m.OldQuantity(ctx)
	case recipeingredient.FieldUnit:
		return m.OldUnit(ctx)
	}
	return nil, fmt.Errorf("unknown RecipeIngredient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeIngredientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipeingredient.FieldQuantity:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case recipeingredient.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeIngredientMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, recipeingredient.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeIngredientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recipeingredient.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeIngredientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recipeingredient.FieldQuantity:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeIngredientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeIngredientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeIngredientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RecipeIngredient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeIngredientMutation) ResetField(name string) error {
	switch name {
	case recipeingredient.FieldQuantity:
		m.ResetQuantity()
		return nil
	case recipeingredient.FieldUnit:
		m.ResetUnit()
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeIngredientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ingredient != nil {
		edges = append(edges, recipeingredient.EdgeIngredient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeIngredientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipeingredient.EdgeIngredient:
		if id := m.ingredient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeIngredientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeIngredientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeIngredientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedingredient {
		edges = append(edges, recipeingredient.EdgeIngredient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeIngredientMutation) EdgeCleared(name string) bool {
	switch name {
	case recipeingredient.EdgeIngredient:
		return m.clearedingredient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeIngredientMutation) ClearEdge(name string) error {
	switch name {
	case recipeingredient.EdgeIngredient:
		m.ClearIngredient()
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeIngredientMutation) ResetEdge(name string) error {
	switch name {
	case recipeingredient.EdgeIngredient:
		m.ResetIngredient()
		return nil
	}
	return fmt.Errorf("unknown RecipeIngredient edge %s", name)
}

// StepMutation represents an operation that mutates the Step nodes in the graph.
type StepMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	clearedFields map[string]struct{}
	recipe        *int
	clearedrecipe bool
	done          bool
	oldValue      func(context.Context) (*Step, error)
	predicates    []predicate.Step
}

var _ ent.Mutation = (*StepMutation)(nil)

// stepOption allows management of the mutation configuration using functional options.
type stepOption func(*StepMutation)

// newStepMutation creates new mutation for the Step entity.
func newStepMutation(c config, op Op, opts ...stepOption) *StepMutation {
	m := &StepMutation{
		config:        c,
		op:            op,
		typ:           TypeStep,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStepID sets the ID field of the mutation.
func withStepID(id int) stepOption {
	return func(m *StepMutation) {
		var (
			err   error
			once  sync.Once
			value *Step
		)
		m.oldValue = func(ctx context.Context) (*Step, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Step.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStep sets the old Step of the mutation.
func withStep(node *Step) stepOption {
	return func(m *StepMutation) {
		m.oldValue = func(context.Context) (*Step, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StepMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StepMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StepMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetText sets the "text" field.
func (m *StepMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *StepMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the Step entity.
// If the Step object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StepMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *StepMutation) ResetText() {
	m.text = nil
}

// SetRecipeID sets the "recipe" edge to the Recipe entity by id.
func (m *StepMutation) SetRecipeID(id int) {
	m.recipe = &id
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (m *StepMutation) ClearRecipe() {
	m.clearedrecipe = true
}

// RecipeCleared reports if the "recipe" edge to the Recipe entity was cleared.
func (m *StepMutation) RecipeCleared() bool {
	return m.clearedrecipe
}

// RecipeID returns the "recipe" edge ID in the mutation.
func (m *StepMutation) RecipeID() (id int, exists bool) {
	if m.recipe != nil {
		return *m.recipe, true
	}
	return
}

// RecipeIDs returns the "recipe" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipeID instead. It exists only for internal usage by the builders.
func (m *StepMutation) RecipeIDs() (ids []int) {
	if id := m.recipe; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipe resets all changes to the "recipe" edge.
func (m *StepMutation) ResetRecipe() {
	m.recipe = nil
	m.clearedrecipe = false
}

// Where appends a list predicates to the StepMutation builder.
func (m *StepMutation) Where(ps ...predicate.Step) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StepMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Step).
func (m *StepMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StepMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.text != nil {
		fields = append(fields, step.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StepMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case step.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StepMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case step.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown Step field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StepMutation) SetField(name string, value ent.Value) error {
	switch name {
	case step.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown Step field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StepMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StepMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StepMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Step numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StepMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StepMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StepMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Step nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StepMutation) ResetField(name string) error {
	switch name {
	case step.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown Step field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StepMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipe != nil {
		edges = append(edges, step.EdgeRecipe)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StepMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case step.EdgeRecipe:
		if id := m.recipe; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StepMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StepMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StepMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipe {
		edges = append(edges, step.EdgeRecipe)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StepMutation) EdgeCleared(name string) bool {
	switch name {
	case step.EdgeRecipe:
		return m.clearedrecipe
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StepMutation) ClearEdge(name string) error {
	switch name {
	case step.EdgeRecipe:
		m.ClearRecipe()
		return nil
	}
	return fmt.Errorf("unknown Step unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StepMutation) ResetEdge(name string) error {
	switch name {
	case step.EdgeRecipe:
		m.ResetRecipe()
		return nil
	}
	return fmt.Errorf("unknown Step edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	clearedFields  map[string]struct{}
	recipes        map[int]struct{}
	removedrecipes map[int]struct{}
	clearedrecipes bool
	done           bool
	oldValue       func(context.Context) (*User, error)
	predicates     []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// AddRecipeIDs adds the "recipes" edge to the Recipe entity by ids.
func (m *UserMutation) AddRecipeIDs(ids ...int) {
	if m.recipes == nil {
		m.recipes = make(map[int]struct{})
	}
	for i := range ids {
		m.recipes[ids[i]] = struct{}{}
	}
}

// ClearRecipes clears the "recipes" edge to the Recipe entity.
func (m *UserMutation) ClearRecipes() {
	m.clearedrecipes = true
}

// RecipesCleared reports if the "recipes" edge to the Recipe entity was cleared.
func (m *UserMutation) RecipesCleared() bool {
	return m.clearedrecipes
}

// RemoveRecipeIDs removes the "recipes" edge to the Recipe entity by IDs.
func (m *UserMutation) RemoveRecipeIDs(ids ...int) {
	if m.removedrecipes == nil {
		m.removedrecipes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipes, ids[i])
		m.removedrecipes[ids[i]] = struct{}{}
	}
}

// RemovedRecipes returns the removed IDs of the "recipes" edge to the Recipe entity.
func (m *UserMutation) RemovedRecipesIDs() (ids []int) {
	for id := range m.removedrecipes {
		ids = append(ids, id)
	}
	return
}

// RecipesIDs returns the "recipes" edge IDs in the mutation.
func (m *UserMutation) RecipesIDs() (ids []int) {
	for id := range m.recipes {
		ids = append(ids, id)
	}
	return
}

// ResetRecipes resets all changes to the "recipes" edge.
func (m *UserMutation) ResetRecipes() {
	m.recipes = nil
	m.clearedrecipes = false
	m.removedrecipes = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipes != nil {
		edges = append(edges, user.EdgeRecipes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRecipes:
		ids := make([]ent.Value, 0, len(m.recipes))
		for id := range m.recipes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecipes != nil {
		edges = append(edges, user.EdgeRecipes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRecipes:
		ids := make([]ent.Value, 0, len(m.removedrecipes))
		for id := range m.removedrecipes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipes {
		edges = append(edges, user.EdgeRecipes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRecipes:
		return m.clearedrecipes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRecipes:
		m.ResetRecipes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
