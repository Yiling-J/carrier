// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent"

	"context"
)

type EntCategoryMutator struct {
	Name string

	_creator *ent.CategoryCreate
}

func (m *EntCategoryMutator) EntCreator() *ent.CategoryCreate {
	return m._creator
}

type entCategoryMutation struct {
	nameType int
	nameFunc func(ctx context.Context, i *EntCategoryMutator, c int) error

	beforeCreateFunc func(ctx context.Context, i *EntCategoryMutator) error
	afterCreateFunc  func(ctx context.Context, i *ent.Category) error
}
type EntCategoryMetaFactory struct {
	mutation entCategoryMutation
}
type entCategoryTrait struct {
	mutation entCategoryMutation
	updates  []func(m *entCategoryMutation)
}

func EntCategoryTrait() *entCategoryTrait {
	return &entCategoryTrait{}
}
func (*entCategoryMutation) beforeCreateMutateFunc(fn func(ctx context.Context, i *EntCategoryMutator) error) func(m *entCategoryMutation) {
	return func(m *entCategoryMutation) {
		m.beforeCreateFunc = fn
	}
}
func (*entCategoryMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *ent.Category) error) func(m *entCategoryMutation) {
	return func(m *entCategoryMutation) {
		m.afterCreateFunc = fn
	}
}

func (*entCategoryMutation) nameSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *entCategoryMutation) {
	return func(m *entCategoryMutation) {
		m.nameType = TypeSequence
		m.nameFunc = func(ctx context.Context, i *EntCategoryMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		}
	}
}
func (*entCategoryMutation) nameLazyMutateFunc(fn func(ctx context.Context, i *EntCategoryMutator) (string, error)) func(m *entCategoryMutation) {
	return func(m *entCategoryMutation) {
		m.nameType = TypeLazy
		m.nameFunc = func(ctx context.Context, i *EntCategoryMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		}
	}
}
func (*entCategoryMutation) nameDefaultMutateFunc(v string) func(m *entCategoryMutation) {
	return func(m *entCategoryMutation) {
		m.nameType = TypeDefault
		m.nameFunc = func(ctx context.Context, i *EntCategoryMutator, c int) error {

			i.EntCreator().SetName(v)

			i.Name = v
			return nil
		}
	}
}
func (*entCategoryMutation) nameFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *entCategoryMutation) {
	return func(m *entCategoryMutation) {
		m.nameType = TypeFactory
		m.nameFunc = func(ctx context.Context, i *EntCategoryMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value

			return nil
		}
	}
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (f *EntCategoryMetaFactory) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *EntCategoryMetaFactory {
	f.mutation.nameSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (f *EntCategoryMetaFactory) SetNameLazy(fn func(ctx context.Context, i *EntCategoryMutator) (string, error)) *EntCategoryMetaFactory {
	f.mutation.nameLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameDefault assign a default value to Name field
func (f *EntCategoryMetaFactory) SetNameDefault(v string) *EntCategoryMetaFactory {
	f.mutation.nameDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (f *EntCategoryMetaFactory) SetNameFactory(fn func(ctx context.Context) (string, error)) *EntCategoryMetaFactory {
	f.mutation.nameFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (t *entCategoryTrait) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *entCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameSequenceMutateFunc(fn))
	return t
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (t *entCategoryTrait) SetNameLazy(fn func(ctx context.Context, i *EntCategoryMutator) (string, error)) *entCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameLazyMutateFunc(fn))
	return t
}

// SetNameDefault assign a default value to Name field
func (t *entCategoryTrait) SetNameDefault(v string) *entCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameDefaultMutateFunc(v))
	return t
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (t *entCategoryTrait) SetNameFactory(fn func(ctx context.Context) (string, error)) *entCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameFactoryMutateFunc(fn))
	return t
}

// SetAfterCreateFunc register a function to be called after struct create
func (f *EntCategoryMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.Category) error) *EntCategoryMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}

// SetBeforeCreateFunc register a function to be called before struct create
func (f *EntCategoryMetaFactory) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntCategoryMutator) error) *EntCategoryMetaFactory {
	f.mutation.beforeCreateFunc = fn
	return f
}

// SetAfterCreateFunc register a function to be called after struct create
func (t *entCategoryTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.Category) error) *entCategoryTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

// SetBeforeCreateFunc register a function to be called before struct create
func (t *entCategoryTrait) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntCategoryMutator) error) *entCategoryTrait {
	t.updates = append(t.updates, t.mutation.beforeCreateMutateFunc(fn))
	return t
}

// Build create a  EntCategoryFactory from EntCategoryMetaFactory
func (f *EntCategoryMetaFactory) Build() *EntCategoryFactory {
	return &EntCategoryFactory{meta: *f, counter: &Counter{}}
}

type EntCategoryFactory struct {
	meta    EntCategoryMetaFactory
	counter *Counter

	client *ent.Client
}

// SetName set the Name field
func (f *EntCategoryFactory) SetName(i string) *EntCategoryBuilder {
	builder := &EntCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetName(i)

	builder.client = f.client

	return builder
}

// Create return a new *ent.Category
func (f *EntCategoryFactory) Create(ctx context.Context) (*ent.Category, error) {
	builder := &EntCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.Create(ctx)
}

// CreateV return a new ent.Category
func (f *EntCategoryFactory) CreateV(ctx context.Context) (ent.Category, error) {
	builder := &EntCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateV(ctx)
}

// CreateBatch return a []*ent.Category slice
func (f *EntCategoryFactory) CreateBatch(ctx context.Context, n int) ([]*ent.Category, error) {
	builder := &EntCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatch(ctx, n)
}

// CreateBatchV return a []ent.Category slice
func (f *EntCategoryFactory) CreateBatchV(ctx context.Context, n int) ([]ent.Category, error) {
	builder := &EntCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatchV(ctx, n)
}

// Client set ent client to EntCategoryFactory
func (f *EntCategoryFactory) Client(c *ent.Client) *EntCategoryFactory {
	f.client = c
	return f
}

type EntCategoryBuilder struct {
	factory  *EntCategoryFactory
	mutation entCategoryMutation
	counter  *Counter

	nameOverride  string
	nameOverriden bool

	client *ent.Client
}

func (b *EntCategoryBuilder) Client(c *ent.Client) *EntCategoryBuilder {
	b.client = c
	return b
}

// SetName set the Name field
func (b *EntCategoryBuilder) SetName(i string) *EntCategoryBuilder {
	b.nameOverride = i
	b.nameOverriden = true
	return b
}

// CreateV return a new ent.Category
func (b *EntCategoryBuilder) CreateV(ctx context.Context) (ent.Category, error) {
	var d ent.Category
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

// Create return a new *ent.Category
func (b *EntCategoryBuilder) Create(ctx context.Context) (*ent.Category, error) {

	var preSlice = []func(ctx context.Context, i *EntCategoryMutator, c int) error{}
	var lazySlice = []func(ctx context.Context, i *EntCategoryMutator, c int) error{}
	var postSlice = []func(ctx context.Context, i *ent.Category, c int) error{}

	index := b.counter.Get()
	_ = index

	client := b.client
	entBuilder := client.Category.Create()

	if b.nameOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntCategoryMutator, c int) error {
			value := b.nameOverride

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		})
	} else {
		switch b.mutation.nameType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.nameFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.nameFunc)
		}
	}

	v := &EntCategoryMutator{}

	v._creator = entBuilder

	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	if b.mutation.beforeCreateFunc != nil {
		if err := b.mutation.beforeCreateFunc(ctx, v); err != nil {
			return nil, err
		}
	}

	new, err := entBuilder.Save(ctx)
	if err != nil {
		return nil, err
	}

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {
		err := f(ctx, new, index)
		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *EntCategoryBuilder) CreateBatch(ctx context.Context, n int) ([]*ent.Category, error) {
	var results []*ent.Category
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *EntCategoryBuilder) CreateBatchV(ctx context.Context, n int) ([]ent.Category, error) {
	var results []ent.Category
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
