// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/Yiling-J/carrier/examples/ent_recipe/ent"

	"context"
)

type EntUserMutator struct {
	Name string

	_creator *ent.UserCreate
}

func (m *EntUserMutator) EntCreator() *ent.UserCreate {
	return m._creator
}

type entUserMutation struct {
	nameType int
	nameFunc func(ctx context.Context, i *EntUserMutator, c int) error

	_postRecipesFunc func(ctx context.Context, set bool, obj *ent.User, i int) error

	beforeCreateFunc func(ctx context.Context, i *EntUserMutator) error
	afterCreateFunc  func(ctx context.Context, i *ent.User) error
}
type EntUserMetaFactory struct {
	mutation entUserMutation
}
type entUserTrait struct {
	mutation entUserMutation
	updates  []func(m *entUserMutation)
}

func EntUserTrait() *entUserTrait {
	return &entUserTrait{}
}
func (*entUserMutation) beforeCreateMutateFunc(fn func(ctx context.Context, i *EntUserMutator) error) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m.beforeCreateFunc = fn
	}
}
func (*entUserMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *ent.User) error) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m.afterCreateFunc = fn
	}
}

func (*entUserMutation) nameSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m.nameType = TypeSequence
		m.nameFunc = func(ctx context.Context, i *EntUserMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		}
	}
}
func (*entUserMutation) nameLazyMutateFunc(fn func(ctx context.Context, i *EntUserMutator) (string, error)) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m.nameType = TypeLazy
		m.nameFunc = func(ctx context.Context, i *EntUserMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		}
	}
}
func (*entUserMutation) nameDefaultMutateFunc(v string) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m.nameType = TypeDefault
		m.nameFunc = func(ctx context.Context, i *EntUserMutator, c int) error {

			i.EntCreator().SetName(v)

			i.Name = v
			return nil
		}
	}
}
func (*entUserMutation) nameFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m.nameType = TypeFactory
		m.nameFunc = func(ctx context.Context, i *EntUserMutator, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.EntCreator().SetName(value)

			i.Name = value

			return nil
		}
	}
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (f *EntUserMetaFactory) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *EntUserMetaFactory {
	f.mutation.nameSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (f *EntUserMetaFactory) SetNameLazy(fn func(ctx context.Context, i *EntUserMutator) (string, error)) *EntUserMetaFactory {
	f.mutation.nameLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameDefault assign a default value to Name field
func (f *EntUserMetaFactory) SetNameDefault(v string) *EntUserMetaFactory {
	f.mutation.nameDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (f *EntUserMetaFactory) SetNameFactory(fn func(ctx context.Context) (string, error)) *EntUserMetaFactory {
	f.mutation.nameFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (t *entUserTrait) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *entUserTrait {
	t.updates = append(t.updates, t.mutation.nameSequenceMutateFunc(fn))
	return t
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (t *entUserTrait) SetNameLazy(fn func(ctx context.Context, i *EntUserMutator) (string, error)) *entUserTrait {
	t.updates = append(t.updates, t.mutation.nameLazyMutateFunc(fn))
	return t
}

// SetNameDefault assign a default value to Name field
func (t *entUserTrait) SetNameDefault(v string) *entUserTrait {
	t.updates = append(t.updates, t.mutation.nameDefaultMutateFunc(v))
	return t
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (t *entUserTrait) SetNameFactory(fn func(ctx context.Context) (string, error)) *entUserTrait {
	t.updates = append(t.updates, t.mutation.nameFactoryMutateFunc(fn))
	return t
}

func (*entUserMutation) recipesPostMutateFunc(fn func(ctx context.Context, set bool, obj *ent.User, i int) error) func(m *entUserMutation) {
	return func(m *entUserMutation) {
		m._postRecipesFunc = fn
	}
}

// SetRecipesPostFunc register a post function which will be called in factory SetRecipesPost method
func (f *EntUserMetaFactory) SetRecipesPostFunc(fn func(ctx context.Context, set bool, obj *ent.User, i int) error) *EntUserMetaFactory {
	f.mutation.recipesPostMutateFunc(fn)(&f.mutation)
	return f
}
func (t *entUserTrait) SetRecipesPostFunc(fn func(ctx context.Context, set bool, obj *ent.User, i int) error) *entUserTrait {
	t.updates = append(t.updates, t.mutation.recipesPostMutateFunc(fn))
	return t
}

// SetAfterCreateFunc register a function to be called after struct create
func (f *EntUserMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.User) error) *EntUserMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}

// SetBeforeCreateFunc register a function to be called before struct create
func (f *EntUserMetaFactory) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntUserMutator) error) *EntUserMetaFactory {
	f.mutation.beforeCreateFunc = fn
	return f
}

// SetAfterCreateFunc register a function to be called after struct create
func (t *entUserTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *ent.User) error) *entUserTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

// SetBeforeCreateFunc register a function to be called before struct create
func (t *entUserTrait) SetBeforeCreateFunc(fn func(ctx context.Context, i *EntUserMutator) error) *entUserTrait {
	t.updates = append(t.updates, t.mutation.beforeCreateMutateFunc(fn))
	return t
}

// Build create a  EntUserFactory from EntUserMetaFactory
func (f *EntUserMetaFactory) Build() *EntUserFactory {
	return &EntUserFactory{meta: *f, counter: &Counter{}}
}

type EntUserFactory struct {
	meta    EntUserMetaFactory
	counter *Counter

	client *ent.Client
}

// SetName set the Name field
func (f *EntUserFactory) SetName(i string) *EntUserBuilder {
	builder := &EntUserBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetName(i)

	builder.client = f.client

	return builder
}

// SetRecipesPost call the post function with int input
func (f *EntUserFactory) SetRecipesPost(i int) *EntUserBuilder {
	builder := &EntUserBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetRecipesPost(i)

	builder.client = f.client

	return builder
}

// Create return a new *ent.User
func (f *EntUserFactory) Create(ctx context.Context) (*ent.User, error) {
	builder := &EntUserBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.Create(ctx)
}

// CreateV return a new ent.User
func (f *EntUserFactory) CreateV(ctx context.Context) (ent.User, error) {
	builder := &EntUserBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateV(ctx)
}

// CreateBatch return a []*ent.User slice
func (f *EntUserFactory) CreateBatch(ctx context.Context, n int) ([]*ent.User, error) {
	builder := &EntUserBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatch(ctx, n)
}

// CreateBatchV return a []ent.User slice
func (f *EntUserFactory) CreateBatchV(ctx context.Context, n int) ([]ent.User, error) {
	builder := &EntUserBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	builder.client = f.client

	return builder.CreateBatchV(ctx, n)
}

// Client set ent client to EntUserFactory
func (f *EntUserFactory) Client(c *ent.Client) *EntUserFactory {
	f.client = c
	return f
}

type EntUserBuilder struct {
	factory  *EntUserFactory
	mutation entUserMutation
	counter  *Counter

	nameOverride  string
	nameOverriden bool

	_postRecipes    int
	_postRecipesSet bool

	client *ent.Client
}

func (b *EntUserBuilder) Client(c *ent.Client) *EntUserBuilder {
	b.client = c
	return b
}

// SetName set the Name field
func (b *EntUserBuilder) SetName(i string) *EntUserBuilder {
	b.nameOverride = i
	b.nameOverriden = true
	return b
}

// SetRecipesPost call the post function with int input
func (b *EntUserBuilder) SetRecipesPost(i int) *EntUserBuilder {
	b._postRecipes = i
	b._postRecipesSet = true
	return b
}

// CreateV return a new ent.User
func (b *EntUserBuilder) CreateV(ctx context.Context) (ent.User, error) {
	var d ent.User
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

// Create return a new *ent.User
func (b *EntUserBuilder) Create(ctx context.Context) (*ent.User, error) {

	var preSlice = []func(ctx context.Context, i *EntUserMutator, c int) error{}
	var lazySlice = []func(ctx context.Context, i *EntUserMutator, c int) error{}
	var postSlice = []func(ctx context.Context, i *ent.User, c int) error{}

	index := b.counter.Get()
	_ = index

	client := b.client
	entBuilder := client.User.Create()

	if b.nameOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *EntUserMutator, c int) error {
			value := b.nameOverride

			i.EntCreator().SetName(value)

			i.Name = value
			return nil
		})
	} else {
		switch b.mutation.nameType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.nameFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.nameFunc)
		}
	}

	if b.mutation._postRecipesFunc != nil {
		postSlice = append(postSlice, func(ctx context.Context, i *ent.User, c int) error {
			err := b.mutation._postRecipesFunc(ctx, b._postRecipesSet, i, b._postRecipes)
			return err
		})
	}

	v := &EntUserMutator{}

	v._creator = entBuilder

	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	if b.mutation.beforeCreateFunc != nil {
		if err := b.mutation.beforeCreateFunc(ctx, v); err != nil {
			return nil, err
		}
	}

	new, err := entBuilder.Save(ctx)
	if err != nil {
		return nil, err
	}

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {
		err := f(ctx, new, index)
		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *EntUserBuilder) CreateBatch(ctx context.Context, n int) ([]*ent.User, error) {
	var results []*ent.User
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *EntUserBuilder) CreateBatchV(ctx context.Context, n int) ([]ent.User, error) {
	var results []ent.User
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
