// Code generated by carrier, DO NOT EDIT.
package carrier

import (
	"github.com/Yiling-J/carrier/examples/recipe/carrier/factory"
)

type Factory struct {
	recipeFactory *factory.RecipeFactory

	recipeStepFactory *factory.RecipeStepFactory

	ingredientFactory *factory.IngredientFactory

	recipeIngredientFactory *factory.RecipeIngredientFactory

	categoryFactory *factory.CategoryFactory

	userFactory *factory.UserFactory
}

func NewFactory() *Factory {
	return &Factory{}
}

func RecipeMetaFactory() *factory.RecipeMetaFactory {
	return &factory.RecipeMetaFactory{}
}
func (f *Factory) SetRecipeFactory(c *factory.RecipeFactory) *Factory {
	f.recipeFactory = c
	return f
}

func (f *Factory) RecipeFactory() *factory.RecipeFactory {
	return f.recipeFactory
}

func RecipeStepMetaFactory() *factory.RecipeStepMetaFactory {
	return &factory.RecipeStepMetaFactory{}
}
func (f *Factory) SetRecipeStepFactory(c *factory.RecipeStepFactory) *Factory {
	f.recipeStepFactory = c
	return f
}

func (f *Factory) RecipeStepFactory() *factory.RecipeStepFactory {
	return f.recipeStepFactory
}

func IngredientMetaFactory() *factory.IngredientMetaFactory {
	return &factory.IngredientMetaFactory{}
}
func (f *Factory) SetIngredientFactory(c *factory.IngredientFactory) *Factory {
	f.ingredientFactory = c
	return f
}

func (f *Factory) IngredientFactory() *factory.IngredientFactory {
	return f.ingredientFactory
}

func RecipeIngredientMetaFactory() *factory.RecipeIngredientMetaFactory {
	return &factory.RecipeIngredientMetaFactory{}
}
func (f *Factory) SetRecipeIngredientFactory(c *factory.RecipeIngredientFactory) *Factory {
	f.recipeIngredientFactory = c
	return f
}

func (f *Factory) RecipeIngredientFactory() *factory.RecipeIngredientFactory {
	return f.recipeIngredientFactory
}

func CategoryMetaFactory() *factory.CategoryMetaFactory {
	return &factory.CategoryMetaFactory{}
}
func (f *Factory) SetCategoryFactory(c *factory.CategoryFactory) *Factory {
	f.categoryFactory = c
	return f
}

func (f *Factory) CategoryFactory() *factory.CategoryFactory {
	return f.categoryFactory
}

func UserMetaFactory() *factory.UserMetaFactory {
	return &factory.UserMetaFactory{}
}
func (f *Factory) SetUserFactory(c *factory.UserFactory) *Factory {
	f.userFactory = c
	return f
}

func (f *Factory) UserFactory() *factory.UserFactory {
	return f.userFactory
}
