// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/Yiling-J/carrier/examples/recipe/model"

	"context"
)

type recipeIngredientMutation struct {
	ingredientType int
	ingredientFunc func(ctx context.Context, i *model.RecipeIngredient, c int) error

	quantityType int
	quantityFunc func(ctx context.Context, i *model.RecipeIngredient, c int) error

	unitType int
	unitFunc func(ctx context.Context, i *model.RecipeIngredient, c int) error

	afterCreateFunc func(ctx context.Context, i *model.RecipeIngredient) error
}
type RecipeIngredientMetaFactory struct {
	mutation recipeIngredientMutation
}
type recipeIngredientTrait struct {
	mutation recipeIngredientMutation
	updates  []func(m *recipeIngredientMutation)
}

func RecipeIngredientTrait() *recipeIngredientTrait {
	return &recipeIngredientTrait{}
}
func (*recipeIngredientMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *model.RecipeIngredient) error) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.afterCreateFunc = fn
	}
}

func (*recipeIngredientMutation) ingredientSequenceMutateFunc(fn func(ctx context.Context, i int) (*model.Ingredient, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.ingredientType = TypeSequence
		m.ingredientFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.Ingredient = value
			return nil
		}
	}
}
func (*recipeIngredientMutation) ingredientLazyMutateFunc(fn func(ctx context.Context, i *model.RecipeIngredient) (*model.Ingredient, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.ingredientType = TypeLazy
		m.ingredientFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.Ingredient = value
			return nil
		}
	}
}
func (*recipeIngredientMutation) ingredientDefaultMutateFunc(v *model.Ingredient) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.ingredientType = TypeDefault
		m.ingredientFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {

			i.Ingredient = v
			return nil
		}
	}
}
func (*recipeIngredientMutation) ingredientFactoryMutateFunc(fn func(ctx context.Context) (*model.Ingredient, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.ingredientType = TypeFactory
		m.ingredientFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.Ingredient = value

			return nil
		}
	}
}

func (f *RecipeIngredientMetaFactory) SetIngredientSequence(fn func(ctx context.Context, i int) (*model.Ingredient, error)) *RecipeIngredientMetaFactory {
	f.mutation.ingredientSequenceMutateFunc(fn)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetIngredientLazy(fn func(ctx context.Context, i *model.RecipeIngredient) (*model.Ingredient, error)) *RecipeIngredientMetaFactory {
	f.mutation.ingredientLazyMutateFunc(fn)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetIngredientDefault(v *model.Ingredient) *RecipeIngredientMetaFactory {
	f.mutation.ingredientDefaultMutateFunc(v)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetIngredientFactory(fn func(ctx context.Context) (*model.Ingredient, error)) *RecipeIngredientMetaFactory {
	f.mutation.ingredientFactoryMutateFunc(fn)(&f.mutation)
	return f
}
func (t *recipeIngredientTrait) SetIngredientSequence(fn func(ctx context.Context, i int) (*model.Ingredient, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.ingredientSequenceMutateFunc(fn))
	return t
}
func (t *recipeIngredientTrait) SetIngredientLazy(fn func(ctx context.Context, i *model.RecipeIngredient) (*model.Ingredient, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.ingredientLazyMutateFunc(fn))
	return t
}
func (t *recipeIngredientTrait) SetIngredientDefault(v *model.Ingredient) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.ingredientDefaultMutateFunc(v))
	return t
}
func (t *recipeIngredientTrait) SetIngredientFactory(fn func(ctx context.Context) (*model.Ingredient, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.ingredientFactoryMutateFunc(fn))
	return t
}

func (*recipeIngredientMutation) quantitySequenceMutateFunc(fn func(ctx context.Context, i int) (float32, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.quantityType = TypeSequence
		m.quantityFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.Quantity = value
			return nil
		}
	}
}
func (*recipeIngredientMutation) quantityLazyMutateFunc(fn func(ctx context.Context, i *model.RecipeIngredient) (float32, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.quantityType = TypeLazy
		m.quantityFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.Quantity = value
			return nil
		}
	}
}
func (*recipeIngredientMutation) quantityDefaultMutateFunc(v float32) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.quantityType = TypeDefault
		m.quantityFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {

			i.Quantity = v
			return nil
		}
	}
}
func (*recipeIngredientMutation) quantityFactoryMutateFunc(fn func(ctx context.Context) (float32, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.quantityType = TypeFactory
		m.quantityFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.Quantity = value

			return nil
		}
	}
}

func (f *RecipeIngredientMetaFactory) SetQuantitySequence(fn func(ctx context.Context, i int) (float32, error)) *RecipeIngredientMetaFactory {
	f.mutation.quantitySequenceMutateFunc(fn)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetQuantityLazy(fn func(ctx context.Context, i *model.RecipeIngredient) (float32, error)) *RecipeIngredientMetaFactory {
	f.mutation.quantityLazyMutateFunc(fn)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetQuantityDefault(v float32) *RecipeIngredientMetaFactory {
	f.mutation.quantityDefaultMutateFunc(v)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetQuantityFactory(fn func(ctx context.Context) (float32, error)) *RecipeIngredientMetaFactory {
	f.mutation.quantityFactoryMutateFunc(fn)(&f.mutation)
	return f
}
func (t *recipeIngredientTrait) SetQuantitySequence(fn func(ctx context.Context, i int) (float32, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.quantitySequenceMutateFunc(fn))
	return t
}
func (t *recipeIngredientTrait) SetQuantityLazy(fn func(ctx context.Context, i *model.RecipeIngredient) (float32, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.quantityLazyMutateFunc(fn))
	return t
}
func (t *recipeIngredientTrait) SetQuantityDefault(v float32) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.quantityDefaultMutateFunc(v))
	return t
}
func (t *recipeIngredientTrait) SetQuantityFactory(fn func(ctx context.Context) (float32, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.quantityFactoryMutateFunc(fn))
	return t
}

func (*recipeIngredientMutation) unitSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.unitType = TypeSequence
		m.unitFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.Unit = value
			return nil
		}
	}
}
func (*recipeIngredientMutation) unitLazyMutateFunc(fn func(ctx context.Context, i *model.RecipeIngredient) (string, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.unitType = TypeLazy
		m.unitFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.Unit = value
			return nil
		}
	}
}
func (*recipeIngredientMutation) unitDefaultMutateFunc(v string) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.unitType = TypeDefault
		m.unitFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {

			i.Unit = v
			return nil
		}
	}
}
func (*recipeIngredientMutation) unitFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *recipeIngredientMutation) {
	return func(m *recipeIngredientMutation) {
		m.unitType = TypeFactory
		m.unitFunc = func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.Unit = value

			return nil
		}
	}
}

func (f *RecipeIngredientMetaFactory) SetUnitSequence(fn func(ctx context.Context, i int) (string, error)) *RecipeIngredientMetaFactory {
	f.mutation.unitSequenceMutateFunc(fn)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetUnitLazy(fn func(ctx context.Context, i *model.RecipeIngredient) (string, error)) *RecipeIngredientMetaFactory {
	f.mutation.unitLazyMutateFunc(fn)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetUnitDefault(v string) *RecipeIngredientMetaFactory {
	f.mutation.unitDefaultMutateFunc(v)(&f.mutation)
	return f
}
func (f *RecipeIngredientMetaFactory) SetUnitFactory(fn func(ctx context.Context) (string, error)) *RecipeIngredientMetaFactory {
	f.mutation.unitFactoryMutateFunc(fn)(&f.mutation)
	return f
}
func (t *recipeIngredientTrait) SetUnitSequence(fn func(ctx context.Context, i int) (string, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.unitSequenceMutateFunc(fn))
	return t
}
func (t *recipeIngredientTrait) SetUnitLazy(fn func(ctx context.Context, i *model.RecipeIngredient) (string, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.unitLazyMutateFunc(fn))
	return t
}
func (t *recipeIngredientTrait) SetUnitDefault(v string) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.unitDefaultMutateFunc(v))
	return t
}
func (t *recipeIngredientTrait) SetUnitFactory(fn func(ctx context.Context) (string, error)) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.unitFactoryMutateFunc(fn))
	return t
}

func (f *RecipeIngredientMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *model.RecipeIngredient) error) *RecipeIngredientMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}
func (t *recipeIngredientTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *model.RecipeIngredient) error) *recipeIngredientTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

func (f *RecipeIngredientMetaFactory) Build() *RecipeIngredientFactory {
	return &RecipeIngredientFactory{meta: *f, counter: &Counter{}}
}

type RecipeIngredientFactory struct {
	meta    RecipeIngredientMetaFactory
	counter *Counter
}

func (f *RecipeIngredientFactory) SetIngredient(i *model.Ingredient) *RecipeIngredientBuilder {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetIngredient(i)

	return builder
}

func (f *RecipeIngredientFactory) SetQuantity(i float32) *RecipeIngredientBuilder {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetQuantity(i)

	return builder
}

func (f *RecipeIngredientFactory) SetUnit(i string) *RecipeIngredientBuilder {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetUnit(i)

	return builder
}

func (f *RecipeIngredientFactory) Create(ctx context.Context) (*model.RecipeIngredient, error) {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.Create(ctx)
}
func (f *RecipeIngredientFactory) CreateV(ctx context.Context) (model.RecipeIngredient, error) {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateV(ctx)
}
func (f *RecipeIngredientFactory) CreateBatch(ctx context.Context, n int) ([]*model.RecipeIngredient, error) {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateBatch(ctx, n)
}
func (f *RecipeIngredientFactory) CreateBatchV(ctx context.Context, n int) ([]model.RecipeIngredient, error) {
	builder := &RecipeIngredientBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateBatchV(ctx, n)
}

type RecipeIngredientBuilder struct {
	factory  *RecipeIngredientFactory
	mutation recipeIngredientMutation
	counter  *Counter

	ingredientOverride  *model.Ingredient
	ingredientOverriden bool

	quantityOverride  float32
	quantityOverriden bool

	unitOverride  string
	unitOverriden bool
}

func (b *RecipeIngredientBuilder) SetIngredient(i *model.Ingredient) *RecipeIngredientBuilder {
	b.ingredientOverride = i
	b.ingredientOverriden = true
	return b
}

func (b *RecipeIngredientBuilder) SetQuantity(i float32) *RecipeIngredientBuilder {
	b.quantityOverride = i
	b.quantityOverriden = true
	return b
}

func (b *RecipeIngredientBuilder) SetUnit(i string) *RecipeIngredientBuilder {
	b.unitOverride = i
	b.unitOverriden = true
	return b
}

func (b *RecipeIngredientBuilder) CreateV(ctx context.Context) (model.RecipeIngredient, error) {
	var d model.RecipeIngredient
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

func (b *RecipeIngredientBuilder) Create(ctx context.Context) (*model.RecipeIngredient, error) {

	var preSlice = []func(ctx context.Context, i *model.RecipeIngredient, c int) error{}
	var lazySlice = []func(ctx context.Context, i *model.RecipeIngredient, c int) error{}
	var postSlice = []func(ctx context.Context, i *model.RecipeIngredient, c int) error{}

	index := b.counter.Get()
	_ = index

	if b.ingredientOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			value := b.ingredientOverride

			i.Ingredient = value
			return nil
		})
	} else {
		switch b.mutation.ingredientType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.ingredientFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.ingredientFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.ingredientFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.ingredientFunc)
		}
	}

	if b.quantityOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			value := b.quantityOverride

			i.Quantity = value
			return nil
		})
	} else {
		switch b.mutation.quantityType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.quantityFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.quantityFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.quantityFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.quantityFunc)
		}
	}

	if b.unitOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *model.RecipeIngredient, c int) error {
			value := b.unitOverride

			i.Unit = value
			return nil
		})
	} else {
		switch b.mutation.unitType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.unitFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.unitFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.unitFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.unitFunc)
		}
	}

	v := &model.RecipeIngredient{}
	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}

	new := v

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {

		err := f(ctx, new, index)

		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *RecipeIngredientBuilder) CreateBatch(ctx context.Context, n int) ([]*model.RecipeIngredient, error) {
	var results []*model.RecipeIngredient
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *RecipeIngredientBuilder) CreateBatchV(ctx context.Context, n int) ([]model.RecipeIngredient, error) {
	var results []model.RecipeIngredient
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
