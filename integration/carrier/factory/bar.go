// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/Yiling-J/carrier/integration/model"

	"context"
)

type barMutation struct {
	nameType int
	nameFunc func(ctx context.Context, i *model.Foo, c int) error

	beforeCreateFunc func(ctx context.Context, i *model.Foo) error
	afterCreateFunc  func(ctx context.Context, i *model.Foo) error
}
type BarMetaFactory struct {
	mutation barMutation
}
type barTrait struct {
	mutation barMutation
	updates  []func(m *barMutation)
}

func BarTrait() *barTrait {
	return &barTrait{}
}
func (*barMutation) beforeCreateMutateFunc(fn func(ctx context.Context, i *model.Foo) error) func(m *barMutation) {
	return func(m *barMutation) {
		m.beforeCreateFunc = fn
	}
}
func (*barMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *model.Foo) error) func(m *barMutation) {
	return func(m *barMutation) {
		m.afterCreateFunc = fn
	}
}

func (*barMutation) nameSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *barMutation) {
	return func(m *barMutation) {
		m.nameType = TypeSequence
		m.nameFunc = func(ctx context.Context, i *model.Foo, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.Name = value
			return nil
		}
	}
}
func (*barMutation) nameLazyMutateFunc(fn func(ctx context.Context, i *model.Foo) (string, error)) func(m *barMutation) {
	return func(m *barMutation) {
		m.nameType = TypeLazy
		m.nameFunc = func(ctx context.Context, i *model.Foo, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.Name = value
			return nil
		}
	}
}
func (*barMutation) nameDefaultMutateFunc(v string) func(m *barMutation) {
	return func(m *barMutation) {
		m.nameType = TypeDefault
		m.nameFunc = func(ctx context.Context, i *model.Foo, c int) error {

			i.Name = v
			return nil
		}
	}
}
func (*barMutation) nameFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *barMutation) {
	return func(m *barMutation) {
		m.nameType = TypeFactory
		m.nameFunc = func(ctx context.Context, i *model.Foo, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.Name = value

			return nil
		}
	}
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (f *BarMetaFactory) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *BarMetaFactory {
	f.mutation.nameSequenceMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (f *BarMetaFactory) SetNameLazy(fn func(ctx context.Context, i *model.Foo) (string, error)) *BarMetaFactory {
	f.mutation.nameLazyMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameDefault assign a default value to Name field
func (f *BarMetaFactory) SetNameDefault(v string) *BarMetaFactory {
	f.mutation.nameDefaultMutateFunc(v)(&f.mutation)
	return f
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (f *BarMetaFactory) SetNameFactory(fn func(ctx context.Context) (string, error)) *BarMetaFactory {
	f.mutation.nameFactoryMutateFunc(fn)(&f.mutation)
	return f
}

// SetNameSequence register a function which accept a sequence counter and set return value to Name field
func (t *barTrait) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *barTrait {
	t.updates = append(t.updates, t.mutation.nameSequenceMutateFunc(fn))
	return t
}

// SetNameLazy register a function which accept the build struct and set return value to Name field
func (t *barTrait) SetNameLazy(fn func(ctx context.Context, i *model.Foo) (string, error)) *barTrait {
	t.updates = append(t.updates, t.mutation.nameLazyMutateFunc(fn))
	return t
}

// SetNameDefault assign a default value to Name field
func (t *barTrait) SetNameDefault(v string) *barTrait {
	t.updates = append(t.updates, t.mutation.nameDefaultMutateFunc(v))
	return t
}

// SetNameFactory register a factory function and assign return value to Name, you can also use related factory's Create/CreateV as input function here
func (t *barTrait) SetNameFactory(fn func(ctx context.Context) (string, error)) *barTrait {
	t.updates = append(t.updates, t.mutation.nameFactoryMutateFunc(fn))
	return t
}

// SetAfterCreateFunc register a function to be called after struct create
func (f *BarMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *model.Foo) error) *BarMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}

// SetBeforeCreateFunc register a function to be called before struct create
func (f *BarMetaFactory) SetBeforeCreateFunc(fn func(ctx context.Context, i *model.Foo) error) *BarMetaFactory {
	f.mutation.beforeCreateFunc = fn
	return f
}

// SetAfterCreateFunc register a function to be called after struct create
func (t *barTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *model.Foo) error) *barTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

// SetBeforeCreateFunc register a function to be called before struct create
func (t *barTrait) SetBeforeCreateFunc(fn func(ctx context.Context, i *model.Foo) error) *barTrait {
	t.updates = append(t.updates, t.mutation.beforeCreateMutateFunc(fn))
	return t
}

// Build create a  BarFactory from BarMetaFactory
func (f *BarMetaFactory) Build() *BarFactory {
	return &BarFactory{meta: *f, counter: &Counter{}}
}

type BarFactory struct {
	meta    BarMetaFactory
	counter *Counter
}

// SetName set the Name field
func (f *BarFactory) SetName(i string) *BarBuilder {
	builder := &BarBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetName(i)

	return builder
}

// Create return a new *model.Foo
func (f *BarFactory) Create(ctx context.Context) (*model.Foo, error) {
	builder := &BarBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.Create(ctx)
}

// CreateV return a new model.Foo
func (f *BarFactory) CreateV(ctx context.Context) (model.Foo, error) {
	builder := &BarBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateV(ctx)
}

// CreateBatch return a []*model.Foo slice
func (f *BarFactory) CreateBatch(ctx context.Context, n int) ([]*model.Foo, error) {
	builder := &BarBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateBatch(ctx, n)
}

// CreateBatchV return a []model.Foo slice
func (f *BarFactory) CreateBatchV(ctx context.Context, n int) ([]model.Foo, error) {
	builder := &BarBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateBatchV(ctx, n)
}

type BarBuilder struct {
	factory  *BarFactory
	mutation barMutation
	counter  *Counter

	nameOverride  string
	nameOverriden bool
}

// SetName set the Name field
func (b *BarBuilder) SetName(i string) *BarBuilder {
	b.nameOverride = i
	b.nameOverriden = true
	return b
}

// CreateV return a new model.Foo
func (b *BarBuilder) CreateV(ctx context.Context) (model.Foo, error) {
	var d model.Foo
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

// Create return a new *model.Foo
func (b *BarBuilder) Create(ctx context.Context) (*model.Foo, error) {

	var preSlice = []func(ctx context.Context, i *model.Foo, c int) error{}
	var lazySlice = []func(ctx context.Context, i *model.Foo, c int) error{}
	var postSlice = []func(ctx context.Context, i *model.Foo, c int) error{}

	index := b.counter.Get()
	_ = index

	if b.nameOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *model.Foo, c int) error {
			value := b.nameOverride

			i.Name = value
			return nil
		})
	} else {
		switch b.mutation.nameType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.nameFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.nameFunc)
		}
	}

	v := &model.Foo{}

	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	if b.mutation.beforeCreateFunc != nil {
		if err := b.mutation.beforeCreateFunc(ctx, v); err != nil {
			return nil, err
		}
	}

	new := v

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {
		err := f(ctx, new, index)
		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *BarBuilder) CreateBatch(ctx context.Context, n int) ([]*model.Foo, error) {
	var results []*model.Foo
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *BarBuilder) CreateBatchV(ctx context.Context, n int) ([]model.Foo, error) {
	var results []model.Foo
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
