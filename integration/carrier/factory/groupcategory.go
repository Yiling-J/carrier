// Code generated by carrier, DO NOT EDIT.
package factory

import (
	"github.com/Yiling-J/carrier/integration/model"

	"context"
)

type groupCategoryMutation struct {
	nameType int
	nameFunc func(ctx context.Context, i *model.GroupCategory, c int) error

	afterCreateFunc func(ctx context.Context, i *model.GroupCategory) error
}
type GroupCategoryMetaFactory struct {
	mutation groupCategoryMutation
}
type groupCategoryTrait struct {
	mutation groupCategoryMutation
	updates  []func(m *groupCategoryMutation)
}

func GroupCategoryTrait() *groupCategoryTrait {
	return &groupCategoryTrait{}
}
func (*groupCategoryMutation) afterCreateMutateFunc(fn func(ctx context.Context, i *model.GroupCategory) error) func(m *groupCategoryMutation) {
	return func(m *groupCategoryMutation) {
		m.afterCreateFunc = fn
	}
}

func (*groupCategoryMutation) nameSequenceMutateFunc(fn func(ctx context.Context, i int) (string, error)) func(m *groupCategoryMutation) {
	return func(m *groupCategoryMutation) {
		m.nameType = TypeSequence
		m.nameFunc = func(ctx context.Context, i *model.GroupCategory, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, c)
			if err != nil {
				return err
			}

			i.Name = value
			return nil
		}
	}
}
func (*groupCategoryMutation) nameLazyMutateFunc(fn func(ctx context.Context, i *model.GroupCategory) (string, error)) func(m *groupCategoryMutation) {
	return func(m *groupCategoryMutation) {
		m.nameType = TypeLazy
		m.nameFunc = func(ctx context.Context, i *model.GroupCategory, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx, i)
			if err != nil {
				return err
			}

			i.Name = value
			return nil
		}
	}
}
func (*groupCategoryMutation) nameDefaultMutateFunc(v string) func(m *groupCategoryMutation) {
	return func(m *groupCategoryMutation) {
		m.nameType = TypeDefault
		m.nameFunc = func(ctx context.Context, i *model.GroupCategory, c int) error {

			i.Name = v
			return nil
		}
	}
}
func (*groupCategoryMutation) nameFactoryMutateFunc(fn func(ctx context.Context) (string, error)) func(m *groupCategoryMutation) {
	return func(m *groupCategoryMutation) {
		m.nameType = TypeFactory
		m.nameFunc = func(ctx context.Context, i *model.GroupCategory, c int) error {
			if fn == nil {
				return nil
			}
			value, err := fn(ctx)
			if err != nil {
				return err
			}

			i.Name = value

			return nil
		}
	}
}

func (f *GroupCategoryMetaFactory) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *GroupCategoryMetaFactory {
	f.mutation.nameSequenceMutateFunc(fn)(&f.mutation)
	return f
}
func (f *GroupCategoryMetaFactory) SetNameLazy(fn func(ctx context.Context, i *model.GroupCategory) (string, error)) *GroupCategoryMetaFactory {
	f.mutation.nameLazyMutateFunc(fn)(&f.mutation)
	return f
}
func (f *GroupCategoryMetaFactory) SetNameDefault(v string) *GroupCategoryMetaFactory {
	f.mutation.nameDefaultMutateFunc(v)(&f.mutation)
	return f
}
func (f *GroupCategoryMetaFactory) SetNameFactory(fn func(ctx context.Context) (string, error)) *GroupCategoryMetaFactory {
	f.mutation.nameFactoryMutateFunc(fn)(&f.mutation)
	return f
}
func (t *groupCategoryTrait) SetNameSequence(fn func(ctx context.Context, i int) (string, error)) *groupCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameSequenceMutateFunc(fn))
	return t
}
func (t *groupCategoryTrait) SetNameLazy(fn func(ctx context.Context, i *model.GroupCategory) (string, error)) *groupCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameLazyMutateFunc(fn))
	return t
}
func (t *groupCategoryTrait) SetNameDefault(v string) *groupCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameDefaultMutateFunc(v))
	return t
}
func (t *groupCategoryTrait) SetNameFactory(fn func(ctx context.Context) (string, error)) *groupCategoryTrait {
	t.updates = append(t.updates, t.mutation.nameFactoryMutateFunc(fn))
	return t
}

func (f *GroupCategoryMetaFactory) SetAfterCreateFunc(fn func(ctx context.Context, i *model.GroupCategory) error) *GroupCategoryMetaFactory {
	f.mutation.afterCreateFunc = fn
	return f
}
func (t *groupCategoryTrait) SetAfterCreateFunc(fn func(ctx context.Context, i *model.GroupCategory) error) *groupCategoryTrait {
	t.updates = append(t.updates, t.mutation.afterCreateMutateFunc(fn))
	return t
}

func (f *GroupCategoryMetaFactory) Build() *GroupCategoryFactory {
	return &GroupCategoryFactory{meta: *f, counter: &Counter{}}
}

type GroupCategoryFactory struct {
	meta    GroupCategoryMetaFactory
	counter *Counter
}

func (f *GroupCategoryFactory) SetName(i string) *GroupCategoryBuilder {
	builder := &GroupCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}
	builder.SetName(i)

	return builder
}

func (f *GroupCategoryFactory) Create(ctx context.Context) (*model.GroupCategory, error) {
	builder := &GroupCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.Create(ctx)
}
func (f *GroupCategoryFactory) CreateV(ctx context.Context) (model.GroupCategory, error) {
	builder := &GroupCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateV(ctx)
}
func (f *GroupCategoryFactory) CreateBatch(ctx context.Context, n int) ([]*model.GroupCategory, error) {
	builder := &GroupCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateBatch(ctx, n)
}
func (f *GroupCategoryFactory) CreateBatchV(ctx context.Context, n int) ([]model.GroupCategory, error) {
	builder := &GroupCategoryBuilder{mutation: f.meta.mutation, counter: f.counter, factory: f}

	return builder.CreateBatchV(ctx, n)
}

type GroupCategoryBuilder struct {
	factory  *GroupCategoryFactory
	mutation groupCategoryMutation
	counter  *Counter

	nameOverride  string
	nameOverriden bool
}

func (b *GroupCategoryBuilder) SetName(i string) *GroupCategoryBuilder {
	b.nameOverride = i
	b.nameOverriden = true
	return b
}

func (b *GroupCategoryBuilder) CreateV(ctx context.Context) (model.GroupCategory, error) {
	var d model.GroupCategory
	p, err := b.Create(ctx)
	if err == nil {
		d = *p
	}
	return d, err
}

func (b *GroupCategoryBuilder) Create(ctx context.Context) (*model.GroupCategory, error) {

	var preSlice = []func(ctx context.Context, i *model.GroupCategory, c int) error{}
	var lazySlice = []func(ctx context.Context, i *model.GroupCategory, c int) error{}
	var postSlice = []func(ctx context.Context, i *model.GroupCategory, c int) error{}

	index := b.counter.Get()
	_ = index

	if b.nameOverriden {
		preSlice = append(preSlice, func(ctx context.Context, i *model.GroupCategory, c int) error {
			value := b.nameOverride

			i.Name = value
			return nil
		})
	} else {
		switch b.mutation.nameType {
		case TypeDefault:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeLazy:
			lazySlice = append(lazySlice, b.mutation.nameFunc)
		case TypeSequence:
			preSlice = append(preSlice, b.mutation.nameFunc)
		case TypeFactory:
			preSlice = append(preSlice, b.mutation.nameFunc)
		}
	}

	v := &model.GroupCategory{}
	for _, f := range preSlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}
	for _, f := range lazySlice {

		err := f(ctx, v, index)

		if err != nil {
			return nil, err
		}
	}

	new := v

	if b.mutation.afterCreateFunc != nil {
		err := b.mutation.afterCreateFunc(ctx, new)
		if err != nil {
			return nil, err
		}
	}
	for _, f := range postSlice {

		err := f(ctx, new, index)

		if err != nil {
			return nil, err
		}
	}

	return new, nil
}
func (b *GroupCategoryBuilder) CreateBatch(ctx context.Context, n int) ([]*model.GroupCategory, error) {
	var results []*model.GroupCategory
	for i := 0; i < n; i++ {
		d, err := b.Create(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
func (b *GroupCategoryBuilder) CreateBatchV(ctx context.Context, n int) ([]model.GroupCategory, error) {
	var results []model.GroupCategory
	for i := 0; i < n; i++ {
		d, err := b.CreateV(ctx)
		if err != nil {
			return results, err
		}
		results = append(results, d)
	}
	return results, nil
}
