// Code generated by carrier, DO NOT EDIT.
{{"package carrier"}}

import (
{{range .Imports}}
    "{{.}}"
{{end}}
)

type Factory struct {
{{range .Schemas}}
    {{.Name | FirstLower}}Factory *factory.{{.Name}}Factory
{{end}}
}

{{range .Schemas}}
    func {{.Name}}MetaFactory() *factory.{{.Name}}MetaFactory {
    return &factory.{{.Name}}MetaFactory{}
    }
    func (f *Factory) Set{{.Name}}Factory(c *factory.{{.Name}}Factory) *Factory {
    f.{{.Name | FirstLower}}Factory = c
    return f
    }

    func (f *Factory) {{.Name}}Factory() *factory.{{.Name}}Factory {
    return f.{{.Name | FirstLower}}Factory
    }
{{end}}

{{if .EntSchemas}}
    type EntFactory struct {
    {{range .EntSchemas}}
	{{.Name | FirstLower}}Factory *factory.Ent{{.Name}}Factory
    {{end}}
    client *ent.Client
    }

    func (f *EntFactory) SetClient(c *ent.Client) {
    f.client = c
    {{range .EntSchemas}}
	_ = f.{{.Name | FirstLower}}Factory.Client(f.client)
    {{end}}
    }

    func (f *EntFactory) Client() *ent.Client {
    return f.client
    }

    {{range .EntSchemas}}
	func Ent{{.Name}}MetaFactory() *factory.Ent{{.Name}}MetaFactory {
	return &factory.Ent{{.Name}}MetaFactory{}
	}
	func (f *EntFactory) Set{{.Name}}Factory(c *factory.Ent{{.Name}}Factory) *EntFactory {
	f.{{.Name | FirstLower}}Factory = c
	return f
	}
	func (f *EntFactory) {{.Name}}Factory() *factory.Ent{{.Name}}Factory {
	return f.{{.Name | FirstLower}}Factory
	}
    {{end}}
{{end}}
